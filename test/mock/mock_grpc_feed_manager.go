// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bloXroute-Labs/gateway/v2/servers (interfaces: GRPCFeedManager)
//
// Generated by this command:
//
//	mockgen -destination ../../bxgateway/test/mock/mock_grpc_feed_manager.go -package mock . GRPCFeedManager
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	blockchain "github.com/bloXroute-Labs/gateway/v2/blockchain"
	servers "github.com/bloXroute-Labs/gateway/v2/servers"
	types "github.com/bloXroute-Labs/gateway/v2/types"
	jsonrpc2 "github.com/sourcegraph/jsonrpc2"
	gomock "go.uber.org/mock/gomock"
)

// MockGRPCFeedManager is a mock of GRPCFeedManager interface.
type MockGRPCFeedManager struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCFeedManagerMockRecorder
}

// MockGRPCFeedManagerMockRecorder is the mock recorder for MockGRPCFeedManager.
type MockGRPCFeedManagerMockRecorder struct {
	mock *MockGRPCFeedManager
}

// NewMockGRPCFeedManager creates a new mock instance.
func NewMockGRPCFeedManager(ctrl *gomock.Controller) *MockGRPCFeedManager {
	mock := &MockGRPCFeedManager{ctrl: ctrl}
	mock.recorder = &MockGRPCFeedManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCFeedManager) EXPECT() *MockGRPCFeedManagerMockRecorder {
	return m.recorder
}

// GetSyncedWSProvider mocks base method.
func (m *MockGRPCFeedManager) GetSyncedWSProvider(arg0 *types.NodeEndpoint) (blockchain.WSProvider, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncedWSProvider", arg0)
	ret0, _ := ret[0].(blockchain.WSProvider)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSyncedWSProvider indicates an expected call of GetSyncedWSProvider.
func (mr *MockGRPCFeedManagerMockRecorder) GetSyncedWSProvider(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncedWSProvider", reflect.TypeOf((*MockGRPCFeedManager)(nil).GetSyncedWSProvider), arg0)
}

// Subscribe mocks base method.
func (m *MockGRPCFeedManager) Subscribe(arg0 types.FeedType, arg1 types.FeedConnectionType, arg2 *jsonrpc2.Conn, arg3 types.ClientInfo, arg4 types.ReqOptions, arg5 bool) (*servers.ClientSubscriptionHandlingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*servers.ClientSubscriptionHandlingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockGRPCFeedManagerMockRecorder) Subscribe(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockGRPCFeedManager)(nil).Subscribe), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Unsubscribe mocks base method.
func (m *MockGRPCFeedManager) Unsubscribe(arg0 string, arg1 bool, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockGRPCFeedManagerMockRecorder) Unsubscribe(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockGRPCFeedManager)(nil).Unsubscribe), arg0, arg1, arg2)
}
