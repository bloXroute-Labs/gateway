// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bloXroute-Labs/gateway/v2/servers/grpc (interfaces: Connector)
//
// Generated by this command:
//
//	mockgen -destination ../../test/mock/connector_mock.go -package mock . Connector
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/bloXroute-Labs/bxcommon-go/types"
	bxmessage "github.com/bloXroute-Labs/gateway/v2/bxmessage"
	connections "github.com/bloXroute-Labs/gateway/v2/connections"
	types0 "github.com/bloXroute-Labs/gateway/v2/types"
	gomock "go.uber.org/mock/gomock"
)

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockConnector) Broadcast(arg0 bxmessage.Message, arg1 connections.Conn, arg2 types.NodeType) types0.BroadcastResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", arg0, arg1, arg2)
	ret0, _ := ret[0].(types0.BroadcastResults)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockConnectorMockRecorder) Broadcast(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockConnector)(nil).Broadcast), arg0, arg1, arg2)
}

// Peers mocks base method.
func (m *MockConnector) Peers(arg0 string) []bxmessage.PeerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peers", arg0)
	ret0, _ := ret[0].([]bxmessage.PeerInfo)
	return ret0
}

// Peers indicates an expected call of Peers.
func (mr *MockConnectorMockRecorder) Peers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockConnector)(nil).Peers), arg0)
}

// Relays mocks base method.
func (m *MockConnector) Relays() map[string]bxmessage.RelayConnectionInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Relays")
	ret0, _ := ret[0].(map[string]bxmessage.RelayConnectionInfo)
	return ret0
}

// Relays indicates an expected call of Relays.
func (mr *MockConnectorMockRecorder) Relays() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relays", reflect.TypeOf((*MockConnector)(nil).Relays))
}
