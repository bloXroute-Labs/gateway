// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/intents_subscriptions_manager.go
//
// Generated by this command:
//
//	mockgen -destination ./test/mock/gw_intents_manager_mock.go -package mock -source ./services/intents_subscriptions_manager.go IntentsManager
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	bxmessage "github.com/bloXroute-Labs/gateway/v2/bxmessage"
	gomock "go.uber.org/mock/gomock"
)

// MockIntentsManager is a mock of IntentsManager interface.
type MockIntentsManager struct {
	ctrl     *gomock.Controller
	recorder *MockIntentsManagerMockRecorder
}

// MockIntentsManagerMockRecorder is the mock recorder for MockIntentsManager.
type MockIntentsManagerMockRecorder struct {
	mock *MockIntentsManager
}

// NewMockIntentsManager creates a new mock instance.
func NewMockIntentsManager(ctrl *gomock.Controller) *MockIntentsManager {
	mock := &MockIntentsManager{ctrl: ctrl}
	mock.recorder = &MockIntentsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntentsManager) EXPECT() *MockIntentsManagerMockRecorder {
	return m.recorder
}

// AddIntentOfInterest mocks base method.
func (m *MockIntentsManager) AddIntentOfInterest(intentID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIntentOfInterest", intentID)
}

// AddIntentOfInterest indicates an expected call of AddIntentOfInterest.
func (mr *MockIntentsManagerMockRecorder) AddIntentOfInterest(intentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIntentOfInterest", reflect.TypeOf((*MockIntentsManager)(nil).AddIntentOfInterest), intentID)
}

// AddIntentsSubscription mocks base method.
func (m *MockIntentsManager) AddIntentsSubscription(solverAddr string, hash, signature []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIntentsSubscription", solverAddr, hash, signature)
}

// AddIntentsSubscription indicates an expected call of AddIntentsSubscription.
func (mr *MockIntentsManagerMockRecorder) AddIntentsSubscription(solverAddr, hash, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIntentsSubscription", reflect.TypeOf((*MockIntentsManager)(nil).AddIntentsSubscription), solverAddr, hash, signature)
}

// AddSolutionsSubscription mocks base method.
func (m *MockIntentsManager) AddSolutionsSubscription(dAppAddr string, hash, signature []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSolutionsSubscription", dAppAddr, hash, signature)
}

// AddSolutionsSubscription indicates an expected call of AddSolutionsSubscription.
func (mr *MockIntentsManagerMockRecorder) AddSolutionsSubscription(dAppAddr, hash, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSolutionsSubscription", reflect.TypeOf((*MockIntentsManager)(nil).AddSolutionsSubscription), dAppAddr, hash, signature)
}

// AppendSolutionForIntent mocks base method.
func (m *MockIntentsManager) AppendSolutionForIntent(solution *bxmessage.IntentSolution) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendSolutionForIntent", solution)
}

// AppendSolutionForIntent indicates an expected call of AppendSolutionForIntent.
func (mr *MockIntentsManagerMockRecorder) AppendSolutionForIntent(solution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendSolutionForIntent", reflect.TypeOf((*MockIntentsManager)(nil).AppendSolutionForIntent), solution)
}

// AppendSolutionsForIntent mocks base method.
func (m *MockIntentsManager) AppendSolutionsForIntent(solutions *bxmessage.IntentSolutions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendSolutionsForIntent", solutions)
}

// AppendSolutionsForIntent indicates an expected call of AppendSolutionsForIntent.
func (mr *MockIntentsManagerMockRecorder) AppendSolutionsForIntent(solutions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendSolutionsForIntent", reflect.TypeOf((*MockIntentsManager)(nil).AppendSolutionsForIntent), solutions)
}

// CleanupExpiredSolutions mocks base method.
func (m *MockIntentsManager) CleanupExpiredSolutions(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupExpiredSolutions", ctx)
}

// CleanupExpiredSolutions indicates an expected call of CleanupExpiredSolutions.
func (mr *MockIntentsManagerMockRecorder) CleanupExpiredSolutions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredSolutions", reflect.TypeOf((*MockIntentsManager)(nil).CleanupExpiredSolutions), ctx)
}

// IntentsSubscriptionExists mocks base method.
func (m *MockIntentsManager) IntentsSubscriptionExists(solverAddr string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntentsSubscriptionExists", solverAddr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IntentsSubscriptionExists indicates an expected call of IntentsSubscriptionExists.
func (mr *MockIntentsManagerMockRecorder) IntentsSubscriptionExists(solverAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntentsSubscriptionExists", reflect.TypeOf((*MockIntentsManager)(nil).IntentsSubscriptionExists), solverAddr)
}

// RmIntentsSubscription mocks base method.
func (m *MockIntentsManager) RmIntentsSubscription(solverAddr string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RmIntentsSubscription", solverAddr)
}

// RmIntentsSubscription indicates an expected call of RmIntentsSubscription.
func (mr *MockIntentsManagerMockRecorder) RmIntentsSubscription(solverAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RmIntentsSubscription", reflect.TypeOf((*MockIntentsManager)(nil).RmIntentsSubscription), solverAddr)
}

// RmSolutionsSubscription mocks base method.
func (m *MockIntentsManager) RmSolutionsSubscription(dAppAddr string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RmSolutionsSubscription", dAppAddr)
}

// RmSolutionsSubscription indicates an expected call of RmSolutionsSubscription.
func (mr *MockIntentsManagerMockRecorder) RmSolutionsSubscription(dAppAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RmSolutionsSubscription", reflect.TypeOf((*MockIntentsManager)(nil).RmSolutionsSubscription), dAppAddr)
}

// SolutionsForIntent mocks base method.
func (m *MockIntentsManager) SolutionsForIntent(intentID string) []bxmessage.IntentSolution {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SolutionsForIntent", intentID)
	ret0, _ := ret[0].([]bxmessage.IntentSolution)
	return ret0
}

// SolutionsForIntent indicates an expected call of SolutionsForIntent.
func (mr *MockIntentsManagerMockRecorder) SolutionsForIntent(intentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolutionsForIntent", reflect.TypeOf((*MockIntentsManager)(nil).SolutionsForIntent), intentID)
}

// SolutionsSubscriptionExists mocks base method.
func (m *MockIntentsManager) SolutionsSubscriptionExists(dAppAddr string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SolutionsSubscriptionExists", dAppAddr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SolutionsSubscriptionExists indicates an expected call of SolutionsSubscriptionExists.
func (mr *MockIntentsManagerMockRecorder) SolutionsSubscriptionExists(dAppAddr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolutionsSubscriptionExists", reflect.TypeOf((*MockIntentsManager)(nil).SolutionsSubscriptionExists), dAppAddr)
}

// SubscriptionMessages mocks base method.
func (m *MockIntentsManager) SubscriptionMessages() []bxmessage.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionMessages")
	ret0, _ := ret[0].([]bxmessage.Message)
	return ret0
}

// SubscriptionMessages indicates an expected call of SubscriptionMessages.
func (mr *MockIntentsManagerMockRecorder) SubscriptionMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionMessages", reflect.TypeOf((*MockIntentsManager)(nil).SubscriptionMessages))
}
