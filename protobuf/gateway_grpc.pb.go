// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: gateway.proto

// The gateway service definition.

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gateway_BlxrTx_FullMethodName                = "/gateway.Gateway/BlxrTx"
	Gateway_BlxrBatchTX_FullMethodName           = "/gateway.Gateway/BlxrBatchTX"
	Gateway_Peers_FullMethodName                 = "/gateway.Gateway/Peers"
	Gateway_TxStoreSummary_FullMethodName        = "/gateway.Gateway/TxStoreSummary"
	Gateway_GetTx_FullMethodName                 = "/gateway.Gateway/GetTx"
	Gateway_Stop_FullMethodName                  = "/gateway.Gateway/Stop"
	Gateway_Version_FullMethodName               = "/gateway.Gateway/Version"
	Gateway_Status_FullMethodName                = "/gateway.Gateway/Status"
	Gateway_Subscriptions_FullMethodName         = "/gateway.Gateway/Subscriptions"
	Gateway_DisconnectInboundPeer_FullMethodName = "/gateway.Gateway/DisconnectInboundPeer"
	Gateway_NewTxs_FullMethodName                = "/gateway.Gateway/NewTxs"
	Gateway_PendingTxs_FullMethodName            = "/gateway.Gateway/PendingTxs"
	Gateway_NewBlocks_FullMethodName             = "/gateway.Gateway/NewBlocks"
	Gateway_BdnBlocks_FullMethodName             = "/gateway.Gateway/BdnBlocks"
	Gateway_EthOnBlock_FullMethodName            = "/gateway.Gateway/EthOnBlock"
	Gateway_TxReceipts_FullMethodName            = "/gateway.Gateway/TxReceipts"
	Gateway_ShortIDs_FullMethodName              = "/gateway.Gateway/ShortIDs"
	Gateway_TxsFromShortIDs_FullMethodName       = "/gateway.Gateway/TxsFromShortIDs"
	Gateway_BlxrSubmitBundle_FullMethodName      = "/gateway.Gateway/BlxrSubmitBundle"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	BlxrTx(ctx context.Context, in *BlxrTxRequest, opts ...grpc.CallOption) (*BlxrTxReply, error)
	BlxrBatchTX(ctx context.Context, in *BlxrBatchTXRequest, opts ...grpc.CallOption) (*BlxrBatchTXReply, error)
	Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersReply, error)
	TxStoreSummary(ctx context.Context, in *TxStoreRequest, opts ...grpc.CallOption) (*TxStoreReply, error)
	GetTx(ctx context.Context, in *GetBxTransactionRequest, opts ...grpc.CallOption) (*GetBxTransactionResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Subscriptions(ctx context.Context, in *SubscriptionsRequest, opts ...grpc.CallOption) (*SubscriptionsReply, error)
	DisconnectInboundPeer(ctx context.Context, in *DisconnectInboundPeerRequest, opts ...grpc.CallOption) (*DisconnectInboundPeerReply, error)
	NewTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TxsReply], error)
	PendingTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TxsReply], error)
	NewBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlocksReply], error)
	BdnBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlocksReply], error)
	EthOnBlock(ctx context.Context, in *EthOnBlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EthOnBlockReply], error)
	TxReceipts(ctx context.Context, in *TxReceiptsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TxReceiptsReply], error)
	ShortIDs(ctx context.Context, in *ShortIDsRequest, opts ...grpc.CallOption) (*ShortIDsReply, error)
	TxsFromShortIDs(ctx context.Context, in *ShortIDListRequest, opts ...grpc.CallOption) (*TxListReply, error)
	BlxrSubmitBundle(ctx context.Context, in *BlxrSubmitBundleRequest, opts ...grpc.CallOption) (*BlxrSubmitBundleReply, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) BlxrTx(ctx context.Context, in *BlxrTxRequest, opts ...grpc.CallOption) (*BlxrTxReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlxrTxReply)
	err := c.cc.Invoke(ctx, Gateway_BlxrTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) BlxrBatchTX(ctx context.Context, in *BlxrBatchTXRequest, opts ...grpc.CallOption) (*BlxrBatchTXReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlxrBatchTXReply)
	err := c.cc.Invoke(ctx, Gateway_BlxrBatchTX_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeersReply)
	err := c.cc.Invoke(ctx, Gateway_Peers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) TxStoreSummary(ctx context.Context, in *TxStoreRequest, opts ...grpc.CallOption) (*TxStoreReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxStoreReply)
	err := c.cc.Invoke(ctx, Gateway_TxStoreSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetTx(ctx context.Context, in *GetBxTransactionRequest, opts ...grpc.CallOption) (*GetBxTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBxTransactionResponse)
	err := c.cc.Invoke(ctx, Gateway_GetTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopReply)
	err := c.cc.Invoke(ctx, Gateway_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionReply)
	err := c.cc.Invoke(ctx, Gateway_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Gateway_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Subscriptions(ctx context.Context, in *SubscriptionsRequest, opts ...grpc.CallOption) (*SubscriptionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionsReply)
	err := c.cc.Invoke(ctx, Gateway_Subscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DisconnectInboundPeer(ctx context.Context, in *DisconnectInboundPeerRequest, opts ...grpc.CallOption) (*DisconnectInboundPeerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectInboundPeerReply)
	err := c.cc.Invoke(ctx, Gateway_DisconnectInboundPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) NewTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TxsReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], Gateway_NewTxs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TxsRequest, TxsReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_NewTxsClient = grpc.ServerStreamingClient[TxsReply]

func (c *gatewayClient) PendingTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TxsReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[1], Gateway_PendingTxs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TxsRequest, TxsReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_PendingTxsClient = grpc.ServerStreamingClient[TxsReply]

func (c *gatewayClient) NewBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlocksReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[2], Gateway_NewBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlocksRequest, BlocksReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_NewBlocksClient = grpc.ServerStreamingClient[BlocksReply]

func (c *gatewayClient) BdnBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlocksReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[3], Gateway_BdnBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlocksRequest, BlocksReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_BdnBlocksClient = grpc.ServerStreamingClient[BlocksReply]

func (c *gatewayClient) EthOnBlock(ctx context.Context, in *EthOnBlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EthOnBlockReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[4], Gateway_EthOnBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EthOnBlockRequest, EthOnBlockReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_EthOnBlockClient = grpc.ServerStreamingClient[EthOnBlockReply]

func (c *gatewayClient) TxReceipts(ctx context.Context, in *TxReceiptsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TxReceiptsReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[5], Gateway_TxReceipts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TxReceiptsRequest, TxReceiptsReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_TxReceiptsClient = grpc.ServerStreamingClient[TxReceiptsReply]

func (c *gatewayClient) ShortIDs(ctx context.Context, in *ShortIDsRequest, opts ...grpc.CallOption) (*ShortIDsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortIDsReply)
	err := c.cc.Invoke(ctx, Gateway_ShortIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) TxsFromShortIDs(ctx context.Context, in *ShortIDListRequest, opts ...grpc.CallOption) (*TxListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxListReply)
	err := c.cc.Invoke(ctx, Gateway_TxsFromShortIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) BlxrSubmitBundle(ctx context.Context, in *BlxrSubmitBundleRequest, opts ...grpc.CallOption) (*BlxrSubmitBundleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlxrSubmitBundleReply)
	err := c.cc.Invoke(ctx, Gateway_BlxrSubmitBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility.
type GatewayServer interface {
	BlxrTx(context.Context, *BlxrTxRequest) (*BlxrTxReply, error)
	BlxrBatchTX(context.Context, *BlxrBatchTXRequest) (*BlxrBatchTXReply, error)
	Peers(context.Context, *PeersRequest) (*PeersReply, error)
	TxStoreSummary(context.Context, *TxStoreRequest) (*TxStoreReply, error)
	GetTx(context.Context, *GetBxTransactionRequest) (*GetBxTransactionResponse, error)
	Stop(context.Context, *StopRequest) (*StopReply, error)
	Version(context.Context, *VersionRequest) (*VersionReply, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Subscriptions(context.Context, *SubscriptionsRequest) (*SubscriptionsReply, error)
	DisconnectInboundPeer(context.Context, *DisconnectInboundPeerRequest) (*DisconnectInboundPeerReply, error)
	NewTxs(*TxsRequest, grpc.ServerStreamingServer[TxsReply]) error
	PendingTxs(*TxsRequest, grpc.ServerStreamingServer[TxsReply]) error
	NewBlocks(*BlocksRequest, grpc.ServerStreamingServer[BlocksReply]) error
	BdnBlocks(*BlocksRequest, grpc.ServerStreamingServer[BlocksReply]) error
	EthOnBlock(*EthOnBlockRequest, grpc.ServerStreamingServer[EthOnBlockReply]) error
	TxReceipts(*TxReceiptsRequest, grpc.ServerStreamingServer[TxReceiptsReply]) error
	ShortIDs(context.Context, *ShortIDsRequest) (*ShortIDsReply, error)
	TxsFromShortIDs(context.Context, *ShortIDListRequest) (*TxListReply, error)
	BlxrSubmitBundle(context.Context, *BlxrSubmitBundleRequest) (*BlxrSubmitBundleReply, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayServer struct{}

func (UnimplementedGatewayServer) BlxrTx(context.Context, *BlxrTxRequest) (*BlxrTxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlxrTx not implemented")
}
func (UnimplementedGatewayServer) BlxrBatchTX(context.Context, *BlxrBatchTXRequest) (*BlxrBatchTXReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlxrBatchTX not implemented")
}
func (UnimplementedGatewayServer) Peers(context.Context, *PeersRequest) (*PeersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peers not implemented")
}
func (UnimplementedGatewayServer) TxStoreSummary(context.Context, *TxStoreRequest) (*TxStoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxStoreSummary not implemented")
}
func (UnimplementedGatewayServer) GetTx(context.Context, *GetBxTransactionRequest) (*GetBxTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTx not implemented")
}
func (UnimplementedGatewayServer) Stop(context.Context, *StopRequest) (*StopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedGatewayServer) Version(context.Context, *VersionRequest) (*VersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedGatewayServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedGatewayServer) Subscriptions(context.Context, *SubscriptionsRequest) (*SubscriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscriptions not implemented")
}
func (UnimplementedGatewayServer) DisconnectInboundPeer(context.Context, *DisconnectInboundPeerRequest) (*DisconnectInboundPeerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectInboundPeer not implemented")
}
func (UnimplementedGatewayServer) NewTxs(*TxsRequest, grpc.ServerStreamingServer[TxsReply]) error {
	return status.Errorf(codes.Unimplemented, "method NewTxs not implemented")
}
func (UnimplementedGatewayServer) PendingTxs(*TxsRequest, grpc.ServerStreamingServer[TxsReply]) error {
	return status.Errorf(codes.Unimplemented, "method PendingTxs not implemented")
}
func (UnimplementedGatewayServer) NewBlocks(*BlocksRequest, grpc.ServerStreamingServer[BlocksReply]) error {
	return status.Errorf(codes.Unimplemented, "method NewBlocks not implemented")
}
func (UnimplementedGatewayServer) BdnBlocks(*BlocksRequest, grpc.ServerStreamingServer[BlocksReply]) error {
	return status.Errorf(codes.Unimplemented, "method BdnBlocks not implemented")
}
func (UnimplementedGatewayServer) EthOnBlock(*EthOnBlockRequest, grpc.ServerStreamingServer[EthOnBlockReply]) error {
	return status.Errorf(codes.Unimplemented, "method EthOnBlock not implemented")
}
func (UnimplementedGatewayServer) TxReceipts(*TxReceiptsRequest, grpc.ServerStreamingServer[TxReceiptsReply]) error {
	return status.Errorf(codes.Unimplemented, "method TxReceipts not implemented")
}
func (UnimplementedGatewayServer) ShortIDs(context.Context, *ShortIDsRequest) (*ShortIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortIDs not implemented")
}
func (UnimplementedGatewayServer) TxsFromShortIDs(context.Context, *ShortIDListRequest) (*TxListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxsFromShortIDs not implemented")
}
func (UnimplementedGatewayServer) BlxrSubmitBundle(context.Context, *BlxrSubmitBundleRequest) (*BlxrSubmitBundleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlxrSubmitBundle not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}
func (UnimplementedGatewayServer) testEmbeddedByValue()                 {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	// If the following call pancis, it indicates UnimplementedGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_BlxrTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlxrTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).BlxrTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_BlxrTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).BlxrTx(ctx, req.(*BlxrTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_BlxrBatchTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlxrBatchTXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).BlxrBatchTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_BlxrBatchTX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).BlxrBatchTX(ctx, req.(*BlxrBatchTXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Peers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Peers(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_TxStoreSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).TxStoreSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_TxStoreSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).TxStoreSummary(ctx, req.(*TxStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBxTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetTx(ctx, req.(*GetBxTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Subscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Subscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_Subscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Subscriptions(ctx, req.(*SubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DisconnectInboundPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectInboundPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DisconnectInboundPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DisconnectInboundPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DisconnectInboundPeer(ctx, req.(*DisconnectInboundPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_NewTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).NewTxs(m, &grpc.GenericServerStream[TxsRequest, TxsReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_NewTxsServer = grpc.ServerStreamingServer[TxsReply]

func _Gateway_PendingTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).PendingTxs(m, &grpc.GenericServerStream[TxsRequest, TxsReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_PendingTxsServer = grpc.ServerStreamingServer[TxsReply]

func _Gateway_NewBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).NewBlocks(m, &grpc.GenericServerStream[BlocksRequest, BlocksReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_NewBlocksServer = grpc.ServerStreamingServer[BlocksReply]

func _Gateway_BdnBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).BdnBlocks(m, &grpc.GenericServerStream[BlocksRequest, BlocksReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_BdnBlocksServer = grpc.ServerStreamingServer[BlocksReply]

func _Gateway_EthOnBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EthOnBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).EthOnBlock(m, &grpc.GenericServerStream[EthOnBlockRequest, EthOnBlockReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_EthOnBlockServer = grpc.ServerStreamingServer[EthOnBlockReply]

func _Gateway_TxReceipts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxReceiptsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).TxReceipts(m, &grpc.GenericServerStream[TxReceiptsRequest, TxReceiptsReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Gateway_TxReceiptsServer = grpc.ServerStreamingServer[TxReceiptsReply]

func _Gateway_ShortIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ShortIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ShortIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ShortIDs(ctx, req.(*ShortIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_TxsFromShortIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).TxsFromShortIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_TxsFromShortIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).TxsFromShortIDs(ctx, req.(*ShortIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_BlxrSubmitBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlxrSubmitBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).BlxrSubmitBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_BlxrSubmitBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).BlxrSubmitBundle(ctx, req.(*BlxrSubmitBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlxrTx",
			Handler:    _Gateway_BlxrTx_Handler,
		},
		{
			MethodName: "BlxrBatchTX",
			Handler:    _Gateway_BlxrBatchTX_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _Gateway_Peers_Handler,
		},
		{
			MethodName: "TxStoreSummary",
			Handler:    _Gateway_TxStoreSummary_Handler,
		},
		{
			MethodName: "GetTx",
			Handler:    _Gateway_GetTx_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Gateway_Stop_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Gateway_Version_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Gateway_Status_Handler,
		},
		{
			MethodName: "Subscriptions",
			Handler:    _Gateway_Subscriptions_Handler,
		},
		{
			MethodName: "DisconnectInboundPeer",
			Handler:    _Gateway_DisconnectInboundPeer_Handler,
		},
		{
			MethodName: "ShortIDs",
			Handler:    _Gateway_ShortIDs_Handler,
		},
		{
			MethodName: "TxsFromShortIDs",
			Handler:    _Gateway_TxsFromShortIDs_Handler,
		},
		{
			MethodName: "BlxrSubmitBundle",
			Handler:    _Gateway_BlxrSubmitBundle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewTxs",
			Handler:       _Gateway_NewTxs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PendingTxs",
			Handler:       _Gateway_PendingTxs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewBlocks",
			Handler:       _Gateway_NewBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BdnBlocks",
			Handler:       _Gateway_BdnBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EthOnBlock",
			Handler:       _Gateway_EthOnBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TxReceipts",
			Handler:       _Gateway_TxReceipts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway.proto",
}
