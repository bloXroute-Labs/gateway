// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.3
// source: gateway.proto

// The gateway service definition.

package gateway

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Topics           []string `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	Data             string   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	BlockNumber      string   `protobuf:"bytes,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TransactionHash  string   `protobuf:"bytes,5,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex string   `protobuf:"bytes,6,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	BlockHash        string   `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	LogIndex         string   `protobuf:"bytes,8,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Removed          bool     `protobuf:"varint,9,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (x *TxLogs) Reset() {
	*x = TxLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxLogs) ProtoMessage() {}

func (x *TxLogs) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxLogs.ProtoReflect.Descriptor instead.
func (*TxLogs) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *TxLogs) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TxLogs) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *TxLogs) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TxLogs) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *TxLogs) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *TxLogs) GetTransactionIndex() string {
	if x != nil {
		return x.TransactionIndex
	}
	return ""
}

func (x *TxLogs) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *TxLogs) GetLogIndex() string {
	if x != nil {
		return x.LogIndex
	}
	return ""
}

func (x *TxLogs) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

type TxReceiptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Includes []string `protobuf:"bytes,1,rep,name=includes,proto3" json:"includes,omitempty"`
	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,2,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *TxReceiptsRequest) Reset() {
	*x = TxReceiptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxReceiptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxReceiptsRequest) ProtoMessage() {}

func (x *TxReceiptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxReceiptsRequest.ProtoReflect.Descriptor instead.
func (*TxReceiptsRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *TxReceiptsRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

// Deprecated: Do not use.
func (x *TxReceiptsRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type TxReceiptsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlocKHash         string    `protobuf:"bytes,1,opt,name=blocK_hash,json=blocKHash,proto3" json:"blocK_hash,omitempty"`
	BlockNumber       string    `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	ContractAddress   string    `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	CumulativeGasUsed string    `protobuf:"bytes,4,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty"`
	EffectiveGasUsed  string    `protobuf:"bytes,5,opt,name=effective_gas_used,json=effectiveGasUsed,proto3" json:"effective_gas_used,omitempty"`
	From              string    `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty"`
	GasUsed           string    `protobuf:"bytes,7,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Logs              []*TxLogs `protobuf:"bytes,8,rep,name=logs,proto3" json:"logs,omitempty"`
	LogsBloom         string    `protobuf:"bytes,9,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Status            string    `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	To                string    `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
	TransactionHash   string    `protobuf:"bytes,12,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	TransactionIndex  string    `protobuf:"bytes,13,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	Type              string    `protobuf:"bytes,14,opt,name=type,proto3" json:"type,omitempty"`
	TxsCount          string    `protobuf:"bytes,15,opt,name=txs_count,json=txsCount,proto3" json:"txs_count,omitempty"`
}

func (x *TxReceiptsReply) Reset() {
	*x = TxReceiptsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxReceiptsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxReceiptsReply) ProtoMessage() {}

func (x *TxReceiptsReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxReceiptsReply.ProtoReflect.Descriptor instead.
func (*TxReceiptsReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *TxReceiptsReply) GetBlocKHash() string {
	if x != nil {
		return x.BlocKHash
	}
	return ""
}

func (x *TxReceiptsReply) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *TxReceiptsReply) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *TxReceiptsReply) GetCumulativeGasUsed() string {
	if x != nil {
		return x.CumulativeGasUsed
	}
	return ""
}

func (x *TxReceiptsReply) GetEffectiveGasUsed() string {
	if x != nil {
		return x.EffectiveGasUsed
	}
	return ""
}

func (x *TxReceiptsReply) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TxReceiptsReply) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *TxReceiptsReply) GetLogs() []*TxLogs {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TxReceiptsReply) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *TxReceiptsReply) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TxReceiptsReply) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TxReceiptsReply) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *TxReceiptsReply) GetTransactionIndex() string {
	if x != nil {
		return x.TransactionIndex
	}
	return ""
}

func (x *TxReceiptsReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TxReceiptsReply) GetTxsCount() string {
	if x != nil {
		return x.TxsCount
	}
	return ""
}

type CallParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params map[string]string `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CallParams) Reset() {
	*x = CallParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallParams) ProtoMessage() {}

func (x *CallParams) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallParams.ProtoReflect.Descriptor instead.
func (*CallParams) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *CallParams) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type EthOnBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Includes   []string      `protobuf:"bytes,1,rep,name=includes,proto3" json:"includes,omitempty"`
	CallParams []*CallParams `protobuf:"bytes,2,rep,name=call_params,json=callParams,proto3" json:"call_params,omitempty"`
	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,3,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *EthOnBlockRequest) Reset() {
	*x = EthOnBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthOnBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthOnBlockRequest) ProtoMessage() {}

func (x *EthOnBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthOnBlockRequest.ProtoReflect.Descriptor instead.
func (*EthOnBlockRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *EthOnBlockRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *EthOnBlockRequest) GetCallParams() []*CallParams {
	if x != nil {
		return x.CallParams
	}
	return nil
}

// Deprecated: Do not use.
func (x *EthOnBlockRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type EthOnBlockReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Response    string `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	BlockHeight string `protobuf:"bytes,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Tag         string `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *EthOnBlockReply) Reset() {
	*x = EthOnBlockReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthOnBlockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthOnBlockReply) ProtoMessage() {}

func (x *EthOnBlockReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthOnBlockReply.ProtoReflect.Descriptor instead.
func (*EthOnBlockReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *EthOnBlockReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EthOnBlockReply) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *EthOnBlockReply) GetBlockHeight() string {
	if x != nil {
		return x.BlockHeight
	}
	return ""
}

func (x *EthOnBlockReply) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type BlxrSubmitBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MevBuilders     map[string]string `protobuf:"bytes,1,rep,name=mev_builders,json=mevBuilders,proto3" json:"mev_builders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Transactions    []string          `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	BlockNumber     string            `protobuf:"bytes,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	MinTimestamp    int64             `protobuf:"varint,4,opt,name=min_timestamp,json=minTimestamp,proto3" json:"min_timestamp,omitempty"`
	MaxTimestamp    int64             `protobuf:"varint,5,opt,name=max_timestamp,json=maxTimestamp,proto3" json:"max_timestamp,omitempty"`
	RevertingHashes []string          `protobuf:"bytes,6,rep,name=reverting_hashes,json=revertingHashes,proto3" json:"reverting_hashes,omitempty"`
	Uuid            string            `protobuf:"bytes,7,opt,name=uuid,proto3" json:"uuid,omitempty"`
	BundlePrice     int64             `protobuf:"varint,8,opt,name=bundle_price,json=bundlePrice,proto3" json:"bundle_price,omitempty"`
	EnforcePayout   bool              `protobuf:"varint,9,opt,name=enforce_payout,json=enforcePayout,proto3" json:"enforce_payout,omitempty"`
}

func (x *BlxrSubmitBundleRequest) Reset() {
	*x = BlxrSubmitBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlxrSubmitBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlxrSubmitBundleRequest) ProtoMessage() {}

func (x *BlxrSubmitBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlxrSubmitBundleRequest.ProtoReflect.Descriptor instead.
func (*BlxrSubmitBundleRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *BlxrSubmitBundleRequest) GetMevBuilders() map[string]string {
	if x != nil {
		return x.MevBuilders
	}
	return nil
}

func (x *BlxrSubmitBundleRequest) GetTransactions() []string {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BlxrSubmitBundleRequest) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *BlxrSubmitBundleRequest) GetMinTimestamp() int64 {
	if x != nil {
		return x.MinTimestamp
	}
	return 0
}

func (x *BlxrSubmitBundleRequest) GetMaxTimestamp() int64 {
	if x != nil {
		return x.MaxTimestamp
	}
	return 0
}

func (x *BlxrSubmitBundleRequest) GetRevertingHashes() []string {
	if x != nil {
		return x.RevertingHashes
	}
	return nil
}

func (x *BlxrSubmitBundleRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BlxrSubmitBundleRequest) GetBundlePrice() int64 {
	if x != nil {
		return x.BundlePrice
	}
	return 0
}

func (x *BlxrSubmitBundleRequest) GetEnforcePayout() bool {
	if x != nil {
		return x.EnforcePayout
	}
	return false
}

type BlxrSubmitBundleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleHash string `protobuf:"bytes,1,opt,name=bundle_hash,json=bundleHash,proto3" json:"bundle_hash,omitempty"`
}

func (x *BlxrSubmitBundleReply) Reset() {
	*x = BlxrSubmitBundleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlxrSubmitBundleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlxrSubmitBundleReply) ProtoMessage() {}

func (x *BlxrSubmitBundleReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlxrSubmitBundleReply.ProtoReflect.Descriptor instead.
func (*BlxrSubmitBundleReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *BlxrSubmitBundleReply) GetBundleHash() string {
	if x != nil {
		return x.BundleHash
	}
	return ""
}

type TxsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters  string   `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Includes []string `protobuf:"bytes,2,rep,name=includes,proto3" json:"includes,omitempty"`
	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,3,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *TxsRequest) Reset() {
	*x = TxsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxsRequest) ProtoMessage() {}

func (x *TxsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxsRequest.ProtoReflect.Descriptor instead.
func (*TxsRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *TxsRequest) GetFilters() string {
	if x != nil {
		return x.Filters
	}
	return ""
}

func (x *TxsRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

// Deprecated: Do not use.
func (x *TxsRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        []byte `protobuf:"bytes,12,opt,name=from,proto3" json:"from,omitempty"`
	LocalRegion bool   `protobuf:"varint,14,opt,name=local_region,json=localRegion,proto3" json:"local_region,omitempty"`
	Time        int64  `protobuf:"varint,15,opt,name=time,proto3" json:"time,omitempty"`
	RawTx       []byte `protobuf:"bytes,16,opt,name=raw_tx,json=rawTx,proto3" json:"raw_tx,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *Tx) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Tx) GetLocalRegion() bool {
	if x != nil {
		return x.LocalRegion
	}
	return false
}

func (x *Tx) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Tx) GetRawTx() []byte {
	if x != nil {
		return x.RawTx
	}
	return nil
}

type AccessTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StorageKeys []string `protobuf:"bytes,2,rep,name=storage_keys,json=storageKeys,proto3" json:"storage_keys,omitempty"`
}

func (x *AccessTuple) Reset() {
	*x = AccessTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTuple) ProtoMessage() {}

func (x *AccessTuple) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTuple.ProtoReflect.Descriptor instead.
func (*AccessTuple) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *AccessTuple) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessTuple) GetStorageKeys() []string {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type TxsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx []*Tx `protobuf:"bytes,1,rep,name=tx,proto3" json:"tx,omitempty"`
}

func (x *TxsReply) Reset() {
	*x = TxsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxsReply) ProtoMessage() {}

func (x *TxsReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxsReply.ProtoReflect.Descriptor instead.
func (*TxsReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{11}
}

func (x *TxsReply) GetTx() []*Tx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type BlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Includes []string `protobuf:"bytes,1,rep,name=includes,proto3" json:"includes,omitempty"`
	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,2,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *BlocksRequest) Reset() {
	*x = BlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksRequest) ProtoMessage() {}

func (x *BlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksRequest.ProtoReflect.Descriptor instead.
func (*BlocksRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{12}
}

func (x *BlocksRequest) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

// Deprecated: Do not use.
func (x *BlocksRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash       string `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Sha3Uncles       string `protobuf:"bytes,2,opt,name=sha3_uncles,json=sha3Uncles,proto3" json:"sha3_uncles,omitempty"`
	Miner            string `protobuf:"bytes,3,opt,name=miner,proto3" json:"miner,omitempty"`
	StateRoot        string `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	TransactionsRoot string `protobuf:"bytes,5,opt,name=transactions_root,json=transactionsRoot,proto3" json:"transactions_root,omitempty"`
	ReceiptsRoot     string `protobuf:"bytes,6,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	LogsBloom        string `protobuf:"bytes,7,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Difficulty       string `protobuf:"bytes,8,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Number           string `protobuf:"bytes,9,opt,name=number,proto3" json:"number,omitempty"`
	GasLimit         string `protobuf:"bytes,10,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed          string `protobuf:"bytes,11,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp        string `protobuf:"bytes,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExtraData        string `protobuf:"bytes,13,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	MixHash          string `protobuf:"bytes,14,opt,name=mix_hash,json=mixHash,proto3" json:"mix_hash,omitempty"`
	Nonce            string `protobuf:"bytes,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
	BaseFeePerGas    string `protobuf:"bytes,16,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"base_fee_per_gas,omitempty"`
	WithdrawalsRoot  string `protobuf:"bytes,17,opt,name=withdrawals_root,json=withdrawalsRoot,proto3" json:"withdrawals_root,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{13}
}

func (x *BlockHeader) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BlockHeader) GetSha3Uncles() string {
	if x != nil {
		return x.Sha3Uncles
	}
	return ""
}

func (x *BlockHeader) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *BlockHeader) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *BlockHeader) GetTransactionsRoot() string {
	if x != nil {
		return x.TransactionsRoot
	}
	return ""
}

func (x *BlockHeader) GetReceiptsRoot() string {
	if x != nil {
		return x.ReceiptsRoot
	}
	return ""
}

func (x *BlockHeader) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *BlockHeader) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *BlockHeader) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *BlockHeader) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *BlockHeader) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *BlockHeader) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *BlockHeader) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

func (x *BlockHeader) GetMixHash() string {
	if x != nil {
		return x.MixHash
	}
	return ""
}

func (x *BlockHeader) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *BlockHeader) GetBaseFeePerGas() string {
	if x != nil {
		return x.BaseFeePerGas
	}
	return ""
}

func (x *BlockHeader) GetWithdrawalsRoot() string {
	if x != nil {
		return x.WithdrawalsRoot
	}
	return ""
}

type FutureValidatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight string `protobuf:"bytes,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	WalletId    string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	Accessible  string `protobuf:"bytes,3,opt,name=accessible,proto3" json:"accessible,omitempty"`
}

func (x *FutureValidatorInfo) Reset() {
	*x = FutureValidatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureValidatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureValidatorInfo) ProtoMessage() {}

func (x *FutureValidatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureValidatorInfo.ProtoReflect.Descriptor instead.
func (*FutureValidatorInfo) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{14}
}

func (x *FutureValidatorInfo) GetBlockHeight() string {
	if x != nil {
		return x.BlockHeight
	}
	return ""
}

func (x *FutureValidatorInfo) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

func (x *FutureValidatorInfo) GetAccessible() string {
	if x != nil {
		return x.Accessible
	}
	return ""
}

type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount         string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Index          string `protobuf:"bytes,3,opt,name=index,proto3" json:"index,omitempty"`
	ValidatorIndex string `protobuf:"bytes,4,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{15}
}

func (x *Withdrawal) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Withdrawal) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Withdrawal) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Withdrawal) GetValidatorIndex() string {
	if x != nil {
		return x.ValidatorIndex
	}
	return ""
}

type BlocksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Deprecated: Do not use.
	SubscriptionID      string                 `protobuf:"bytes,2,opt,name=subscriptionID,proto3" json:"subscriptionID,omitempty"`
	Header              *BlockHeader           `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	FutureValidatorInfo []*FutureValidatorInfo `protobuf:"bytes,4,rep,name=future_validator_info,json=futureValidatorInfo,proto3" json:"future_validator_info,omitempty"`
	Transaction         []*Tx                  `protobuf:"bytes,5,rep,name=transaction,proto3" json:"transaction,omitempty"`
	Withdrawals         []*Withdrawal          `protobuf:"bytes,6,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
}

func (x *BlocksReply) Reset() {
	*x = BlocksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksReply) ProtoMessage() {}

func (x *BlocksReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksReply.ProtoReflect.Descriptor instead.
func (*BlocksReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{16}
}

func (x *BlocksReply) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// Deprecated: Do not use.
func (x *BlocksReply) GetSubscriptionID() string {
	if x != nil {
		return x.SubscriptionID
	}
	return ""
}

func (x *BlocksReply) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlocksReply) GetFutureValidatorInfo() []*FutureValidatorInfo {
	if x != nil {
		return x.FutureValidatorInfo
	}
	return nil
}

func (x *BlocksReply) GetTransaction() []*Tx {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *BlocksReply) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

type DisconnectInboundPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp    string `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	PeerPort  int64  `protobuf:"varint,2,opt,name=peer_port,json=peerPort,proto3" json:"peer_port,omitempty"`
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,4,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *DisconnectInboundPeerRequest) Reset() {
	*x = DisconnectInboundPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectInboundPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectInboundPeerRequest) ProtoMessage() {}

func (x *DisconnectInboundPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectInboundPeerRequest.ProtoReflect.Descriptor instead.
func (*DisconnectInboundPeerRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{17}
}

func (x *DisconnectInboundPeerRequest) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *DisconnectInboundPeerRequest) GetPeerPort() int64 {
	if x != nil {
		return x.PeerPort
	}
	return 0
}

func (x *DisconnectInboundPeerRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// Deprecated: Do not use.
func (x *DisconnectInboundPeerRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type DisconnectInboundPeerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DisconnectInboundPeerReply) Reset() {
	*x = DisconnectInboundPeerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectInboundPeerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectInboundPeerReply) ProtoMessage() {}

func (x *DisconnectInboundPeerReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectInboundPeerReply.ProtoReflect.Descriptor instead.
func (*DisconnectInboundPeerReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{18}
}

func (x *DisconnectInboundPeerReply) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *SubscriptionsRequest) Reset() {
	*x = SubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionsRequest) ProtoMessage() {}

func (x *SubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{19}
}

// Deprecated: Do not use.
func (x *SubscriptionsRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Tier         string `protobuf:"bytes,2,opt,name=tier,proto3" json:"tier,omitempty"`
	FeedName     string `protobuf:"bytes,3,opt,name=feed_name,json=feedName,proto3" json:"feed_name,omitempty"`
	Network      uint32 `protobuf:"varint,4,opt,name=network,proto3" json:"network,omitempty"`
	RemoteAddr   string `protobuf:"bytes,5,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	Include      string `protobuf:"bytes,6,opt,name=include,proto3" json:"include,omitempty"`
	Filter       string `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Age          uint64 `protobuf:"varint,8,opt,name=age,proto3" json:"age,omitempty"`
	MessagesSent uint64 `protobuf:"varint,9,opt,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{20}
}

func (x *Subscription) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Subscription) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *Subscription) GetFeedName() string {
	if x != nil {
		return x.FeedName
	}
	return ""
}

func (x *Subscription) GetNetwork() uint32 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *Subscription) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *Subscription) GetInclude() string {
	if x != nil {
		return x.Include
	}
	return ""
}

func (x *Subscription) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *Subscription) GetAge() uint64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Subscription) GetMessagesSent() uint64 {
	if x != nil {
		return x.MessagesSent
	}
	return 0
}

type SubscriptionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *SubscriptionsReply) Reset() {
	*x = SubscriptionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionsReply) ProtoMessage() {}

func (x *SubscriptionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionsReply.ProtoReflect.Descriptor instead.
func (*SubscriptionsReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{21}
}

func (x *SubscriptionsReply) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type VersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *VersionRequest) Reset() {
	*x = VersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionRequest) ProtoMessage() {}

func (x *VersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionRequest.ProtoReflect.Descriptor instead.
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{22}
}

// Deprecated: Do not use.
func (x *VersionRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type VersionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	BuildDate string `protobuf:"bytes,2,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
}

func (x *VersionReply) Reset() {
	*x = VersionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionReply) ProtoMessage() {}

func (x *VersionReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionReply.ProtoReflect.Descriptor instead.
func (*VersionReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{23}
}

func (x *VersionReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionReply) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{24}
}

// Deprecated: Do not use.
func (x *StopRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type StopReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopReply) Reset() {
	*x = StopReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopReply) ProtoMessage() {}

func (x *StopReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopReply.ProtoReflect.Descriptor instead.
func (*StopReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{25}
}

type PeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,2,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *PeersRequest) Reset() {
	*x = PeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersRequest) ProtoMessage() {}

func (x *PeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersRequest.ProtoReflect.Descriptor instead.
func (*PeersRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{26}
}

func (x *PeersRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Deprecated: Do not use.
func (x *PeersRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type RateSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiveMinute int64 `protobuf:"varint,1,opt,name=fiveMinute,proto3" json:"fiveMinute,omitempty"`
	OneHour    int64 `protobuf:"varint,2,opt,name=oneHour,proto3" json:"oneHour,omitempty"`
	OneDay     int64 `protobuf:"varint,3,opt,name=oneDay,proto3" json:"oneDay,omitempty"`
}

func (x *RateSnapshot) Reset() {
	*x = RateSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateSnapshot) ProtoMessage() {}

func (x *RateSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateSnapshot.ProtoReflect.Descriptor instead.
func (*RateSnapshot) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{27}
}

func (x *RateSnapshot) GetFiveMinute() int64 {
	if x != nil {
		return x.FiveMinute
	}
	return 0
}

func (x *RateSnapshot) GetOneHour() int64 {
	if x != nil {
		return x.OneHour
	}
	return 0
}

func (x *RateSnapshot) GetOneDay() int64 {
	if x != nil {
		return x.OneDay
	}
	return 0
}

type Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip                       string        `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	NodeId                   string        `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Type                     string        `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	State                    string        `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Network                  uint32        `protobuf:"varint,5,opt,name=network,proto3" json:"network,omitempty"`
	Initiator                bool          `protobuf:"varint,6,opt,name=initiator,proto3" json:"initiator,omitempty"`
	MinUsFromPeer            int64         `protobuf:"varint,7,opt,name=min_us_from_peer,json=minUsFromPeer,proto3" json:"min_us_from_peer,omitempty"`
	MinUsToPeer              int64         `protobuf:"varint,8,opt,name=min_us_to_peer,json=minUsToPeer,proto3" json:"min_us_to_peer,omitempty"`
	SlowTrafficCount         int64         `protobuf:"varint,9,opt,name=slow_traffic_count,json=slowTrafficCount,proto3" json:"slow_traffic_count,omitempty"`
	MinUsRoundTrip           int64         `protobuf:"varint,10,opt,name=min_us_round_trip,json=minUsRoundTrip,proto3" json:"min_us_round_trip,omitempty"`
	AccountId                string        `protobuf:"bytes,11,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountTier              string        `protobuf:"bytes,12,opt,name=account_tier,json=accountTier,proto3" json:"account_tier,omitempty"`
	Port                     int64         `protobuf:"varint,13,opt,name=port,proto3" json:"port,omitempty"`
	Disabled                 bool          `protobuf:"varint,14,opt,name=disabled,proto3" json:"disabled,omitempty"`
	MevMiner                 string        `protobuf:"bytes,15,opt,name=mev_miner,json=mevMiner,proto3" json:"mev_miner,omitempty"`
	MevBuilder               string        `protobuf:"bytes,16,opt,name=mev_builder,json=mevBuilder,proto3" json:"mev_builder,omitempty"` // Deprecated
	Capability               uint32        `protobuf:"varint,17,opt,name=capability,proto3" json:"capability,omitempty"`
	UnpaidTxBurstLimit       int64         `protobuf:"varint,18,opt,name=unpaid_tx_burst_limit,json=unpaidTxBurstLimit,proto3" json:"unpaid_tx_burst_limit,omitempty"`
	PaidTxBurstLimit         int64         `protobuf:"varint,19,opt,name=paid_tx_burst_limit,json=paidTxBurstLimit,proto3" json:"paid_tx_burst_limit,omitempty"`
	UnpaidTxBurstLimitExcess *RateSnapshot `protobuf:"bytes,20,opt,name=unpaid_tx_burst_limit_excess,json=unpaidTxBurstLimitExcess,proto3" json:"unpaid_tx_burst_limit_excess,omitempty"`
	PaidTxBurstLimitExcess   *RateSnapshot `protobuf:"bytes,21,opt,name=paid_tx_burst_limit_excess,json=paidTxBurstLimitExcess,proto3" json:"paid_tx_burst_limit_excess,omitempty"`
	PaidTxThroughput         *RateSnapshot `protobuf:"bytes,22,opt,name=paid_tx_throughput,json=paidTxThroughput,proto3" json:"paid_tx_throughput,omitempty"`
	UnpaidTxThroughput       *RateSnapshot `protobuf:"bytes,23,opt,name=unpaid_tx_throughput,json=unpaidTxThroughput,proto3" json:"unpaid_tx_throughput,omitempty"`
	Trusted                  string        `protobuf:"bytes,24,opt,name=trusted,proto3" json:"trusted,omitempty"`
	MevBuilders              []string      `protobuf:"bytes,25,rep,name=mev_builders,json=mevBuilders,proto3" json:"mev_builders,omitempty"`
	NewTxs                   int64         `protobuf:"varint,26,opt,name=new_txs,json=newTxs,proto3" json:"new_txs,omitempty"`
	AlreadySeenTxs           int64         `protobuf:"varint,27,opt,name=already_seen_txs,json=alreadySeenTxs,proto3" json:"already_seen_txs,omitempty"`
}

func (x *Peer) Reset() {
	*x = Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{28}
}

func (x *Peer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Peer) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Peer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Peer) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Peer) GetNetwork() uint32 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *Peer) GetInitiator() bool {
	if x != nil {
		return x.Initiator
	}
	return false
}

func (x *Peer) GetMinUsFromPeer() int64 {
	if x != nil {
		return x.MinUsFromPeer
	}
	return 0
}

func (x *Peer) GetMinUsToPeer() int64 {
	if x != nil {
		return x.MinUsToPeer
	}
	return 0
}

func (x *Peer) GetSlowTrafficCount() int64 {
	if x != nil {
		return x.SlowTrafficCount
	}
	return 0
}

func (x *Peer) GetMinUsRoundTrip() int64 {
	if x != nil {
		return x.MinUsRoundTrip
	}
	return 0
}

func (x *Peer) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Peer) GetAccountTier() string {
	if x != nil {
		return x.AccountTier
	}
	return ""
}

func (x *Peer) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Peer) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Peer) GetMevMiner() string {
	if x != nil {
		return x.MevMiner
	}
	return ""
}

func (x *Peer) GetMevBuilder() string {
	if x != nil {
		return x.MevBuilder
	}
	return ""
}

func (x *Peer) GetCapability() uint32 {
	if x != nil {
		return x.Capability
	}
	return 0
}

func (x *Peer) GetUnpaidTxBurstLimit() int64 {
	if x != nil {
		return x.UnpaidTxBurstLimit
	}
	return 0
}

func (x *Peer) GetPaidTxBurstLimit() int64 {
	if x != nil {
		return x.PaidTxBurstLimit
	}
	return 0
}

func (x *Peer) GetUnpaidTxBurstLimitExcess() *RateSnapshot {
	if x != nil {
		return x.UnpaidTxBurstLimitExcess
	}
	return nil
}

func (x *Peer) GetPaidTxBurstLimitExcess() *RateSnapshot {
	if x != nil {
		return x.PaidTxBurstLimitExcess
	}
	return nil
}

func (x *Peer) GetPaidTxThroughput() *RateSnapshot {
	if x != nil {
		return x.PaidTxThroughput
	}
	return nil
}

func (x *Peer) GetUnpaidTxThroughput() *RateSnapshot {
	if x != nil {
		return x.UnpaidTxThroughput
	}
	return nil
}

func (x *Peer) GetTrusted() string {
	if x != nil {
		return x.Trusted
	}
	return ""
}

func (x *Peer) GetMevBuilders() []string {
	if x != nil {
		return x.MevBuilders
	}
	return nil
}

func (x *Peer) GetNewTxs() int64 {
	if x != nil {
		return x.NewTxs
	}
	return 0
}

func (x *Peer) GetAlreadySeenTxs() int64 {
	if x != nil {
		return x.AlreadySeenTxs
	}
	return 0
}

type PeersReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *PeersReply) Reset() {
	*x = PeersReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersReply) ProtoMessage() {}

func (x *PeersReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersReply.ProtoReflect.Descriptor instead.
func (*PeersReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{29}
}

func (x *PeersReply) GetPeers() []*Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

type SendTXRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendTXRequest) Reset() {
	*x = SendTXRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTXRequest) ProtoMessage() {}

func (x *SendTXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTXRequest.ProtoReflect.Descriptor instead.
func (*SendTXRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{30}
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{31}
}

func (x *Transaction) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Transactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *Transactions) Reset() {
	*x = Transactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transactions) ProtoMessage() {}

func (x *Transactions) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transactions.ProtoReflect.Descriptor instead.
func (*Transactions) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{32}
}

func (x *Transactions) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type BxTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash     string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ShortIds []uint64               `protobuf:"varint,2,rep,packed,name=short_ids,json=shortIds,proto3" json:"short_ids,omitempty"`
	AddTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
}

func (x *BxTransaction) Reset() {
	*x = BxTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BxTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BxTransaction) ProtoMessage() {}

func (x *BxTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BxTransaction.ProtoReflect.Descriptor instead.
func (*BxTransaction) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{33}
}

func (x *BxTransaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BxTransaction) GetShortIds() []uint64 {
	if x != nil {
		return x.ShortIds
	}
	return nil
}

func (x *BxTransaction) GetAddTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AddTime
	}
	return nil
}

type GetBxTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetBxTransactionRequest) Reset() {
	*x = GetBxTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBxTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBxTransactionRequest) ProtoMessage() {}

func (x *GetBxTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBxTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetBxTransactionRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{34}
}

func (x *GetBxTransactionRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBxTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *BxTransaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *GetBxTransactionResponse) Reset() {
	*x = GetBxTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBxTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBxTransactionResponse) ProtoMessage() {}

func (x *GetBxTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBxTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetBxTransactionResponse) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{35}
}

func (x *GetBxTransactionResponse) GetTx() *BxTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type TxStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *TxStoreRequest) Reset() {
	*x = TxStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxStoreRequest) ProtoMessage() {}

func (x *TxStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxStoreRequest.ProtoReflect.Descriptor instead.
func (*TxStoreRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{36}
}

// Deprecated: Do not use.
func (x *TxStoreRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type TxStoreNetworkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network      uint64         `protobuf:"varint,4,opt,name=network,proto3" json:"network,omitempty"`
	TxCount      uint64         `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	ShortIdCount uint64         `protobuf:"varint,2,opt,name=short_id_count,json=shortIdCount,proto3" json:"short_id_count,omitempty"`
	OldestTx     *BxTransaction `protobuf:"bytes,3,opt,name=oldest_tx,json=oldestTx,proto3" json:"oldest_tx,omitempty"`
}

func (x *TxStoreNetworkData) Reset() {
	*x = TxStoreNetworkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxStoreNetworkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxStoreNetworkData) ProtoMessage() {}

func (x *TxStoreNetworkData) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxStoreNetworkData.ProtoReflect.Descriptor instead.
func (*TxStoreNetworkData) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{37}
}

func (x *TxStoreNetworkData) GetNetwork() uint64 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *TxStoreNetworkData) GetTxCount() uint64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *TxStoreNetworkData) GetShortIdCount() uint64 {
	if x != nil {
		return x.ShortIdCount
	}
	return 0
}

func (x *TxStoreNetworkData) GetOldestTx() *BxTransaction {
	if x != nil {
		return x.OldestTx
	}
	return nil
}

type TxStoreReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxCount      uint64                `protobuf:"varint,1,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	ShortIdCount uint64                `protobuf:"varint,2,opt,name=short_id_count,json=shortIdCount,proto3" json:"short_id_count,omitempty"`
	NetworkData  []*TxStoreNetworkData `protobuf:"bytes,3,rep,name=network_data,json=networkData,proto3" json:"network_data,omitempty"`
}

func (x *TxStoreReply) Reset() {
	*x = TxStoreReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxStoreReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxStoreReply) ProtoMessage() {}

func (x *TxStoreReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxStoreReply.ProtoReflect.Descriptor instead.
func (*TxStoreReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{38}
}

func (x *TxStoreReply) GetTxCount() uint64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *TxStoreReply) GetShortIdCount() uint64 {
	if x != nil {
		return x.ShortIdCount
	}
	return 0
}

func (x *TxStoreReply) GetNetworkData() []*TxStoreNetworkData {
	if x != nil {
		return x.NetworkData
	}
	return nil
}

type TxAndSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction string `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Sender      []byte `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *TxAndSender) Reset() {
	*x = TxAndSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxAndSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxAndSender) ProtoMessage() {}

func (x *TxAndSender) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxAndSender.ProtoReflect.Descriptor instead.
func (*TxAndSender) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{39}
}

func (x *TxAndSender) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *TxAndSender) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

type BlxrBatchTXRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionsAndSenders []*TxAndSender `protobuf:"bytes,1,rep,name=transactions_and_senders,json=transactionsAndSenders,proto3" json:"transactions_and_senders,omitempty"`
	NonceMonitoring        bool           `protobuf:"varint,2,opt,name=nonce_monitoring,json=nonceMonitoring,proto3" json:"nonce_monitoring,omitempty"`
	NextValidator          bool           `protobuf:"varint,3,opt,name=next_validator,json=nextValidator,proto3" json:"next_validator,omitempty"`
	Fallback               int32          `protobuf:"varint,4,opt,name=fallback,proto3" json:"fallback,omitempty"`
	ValidatorsOnly         bool           `protobuf:"varint,5,opt,name=validators_only,json=validatorsOnly,proto3" json:"validators_only,omitempty"`
	NodeValidation         bool           `protobuf:"varint,6,opt,name=node_validation,json=nodeValidation,proto3" json:"node_validation,omitempty"`
	SendingTime            int64          `protobuf:"varint,7,opt,name=sending_time,json=sendingTime,proto3" json:"sending_time,omitempty"`
	// Deprecated: Do not use.
	AuthHeader             string `protobuf:"bytes,8,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	FrontrunningProtection bool   `protobuf:"varint,9,opt,name=frontrunning_protection,json=frontrunningProtection,proto3" json:"frontrunning_protection,omitempty"`
}

func (x *BlxrBatchTXRequest) Reset() {
	*x = BlxrBatchTXRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlxrBatchTXRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlxrBatchTXRequest) ProtoMessage() {}

func (x *BlxrBatchTXRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlxrBatchTXRequest.ProtoReflect.Descriptor instead.
func (*BlxrBatchTXRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{40}
}

func (x *BlxrBatchTXRequest) GetTransactionsAndSenders() []*TxAndSender {
	if x != nil {
		return x.TransactionsAndSenders
	}
	return nil
}

func (x *BlxrBatchTXRequest) GetNonceMonitoring() bool {
	if x != nil {
		return x.NonceMonitoring
	}
	return false
}

func (x *BlxrBatchTXRequest) GetNextValidator() bool {
	if x != nil {
		return x.NextValidator
	}
	return false
}

func (x *BlxrBatchTXRequest) GetFallback() int32 {
	if x != nil {
		return x.Fallback
	}
	return 0
}

func (x *BlxrBatchTXRequest) GetValidatorsOnly() bool {
	if x != nil {
		return x.ValidatorsOnly
	}
	return false
}

func (x *BlxrBatchTXRequest) GetNodeValidation() bool {
	if x != nil {
		return x.NodeValidation
	}
	return false
}

func (x *BlxrBatchTXRequest) GetSendingTime() int64 {
	if x != nil {
		return x.SendingTime
	}
	return 0
}

// Deprecated: Do not use.
func (x *BlxrBatchTXRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *BlxrBatchTXRequest) GetFrontrunningProtection() bool {
	if x != nil {
		return x.FrontrunningProtection
	}
	return false
}

type BlxrTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction     string `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	NonceMonitoring bool   `protobuf:"varint,2,opt,name=nonce_monitoring,json=nonceMonitoring,proto3" json:"nonce_monitoring,omitempty"`
	NextValidator   bool   `protobuf:"varint,3,opt,name=next_validator,json=nextValidator,proto3" json:"next_validator,omitempty"`
	// Deprecated: Do not use.
	AuthHeader             string `protobuf:"bytes,4,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	ValidatorsOnly         bool   `protobuf:"varint,5,opt,name=validators_only,json=validatorsOnly,proto3" json:"validators_only,omitempty"`
	Fallback               int32  `protobuf:"varint,6,opt,name=fallback,proto3" json:"fallback,omitempty"`
	NodeValidation         bool   `protobuf:"varint,7,opt,name=node_validation,json=nodeValidation,proto3" json:"node_validation,omitempty"`
	FrontrunningProtection bool   `protobuf:"varint,8,opt,name=frontrunning_protection,json=frontrunningProtection,proto3" json:"frontrunning_protection,omitempty"`
}

func (x *BlxrTxRequest) Reset() {
	*x = BlxrTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlxrTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlxrTxRequest) ProtoMessage() {}

func (x *BlxrTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlxrTxRequest.ProtoReflect.Descriptor instead.
func (*BlxrTxRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{41}
}

func (x *BlxrTxRequest) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *BlxrTxRequest) GetNonceMonitoring() bool {
	if x != nil {
		return x.NonceMonitoring
	}
	return false
}

func (x *BlxrTxRequest) GetNextValidator() bool {
	if x != nil {
		return x.NextValidator
	}
	return false
}

// Deprecated: Do not use.
func (x *BlxrTxRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *BlxrTxRequest) GetValidatorsOnly() bool {
	if x != nil {
		return x.ValidatorsOnly
	}
	return false
}

func (x *BlxrTxRequest) GetFallback() int32 {
	if x != nil {
		return x.Fallback
	}
	return 0
}

func (x *BlxrTxRequest) GetNodeValidation() bool {
	if x != nil {
		return x.NodeValidation
	}
	return false
}

func (x *BlxrTxRequest) GetFrontrunningProtection() bool {
	if x != nil {
		return x.FrontrunningProtection
	}
	return false
}

type BlxrTxReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *BlxrTxReply) Reset() {
	*x = BlxrTxReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlxrTxReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlxrTxReply) ProtoMessage() {}

func (x *BlxrTxReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlxrTxReply.ProtoReflect.Descriptor instead.
func (*BlxrTxReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{42}
}

func (x *BlxrTxReply) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type TxIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx    int32  `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	TxHash string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *TxIndex) Reset() {
	*x = TxIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxIndex) ProtoMessage() {}

func (x *TxIndex) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxIndex.ProtoReflect.Descriptor instead.
func (*TxIndex) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{43}
}

func (x *TxIndex) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *TxIndex) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type ErrorIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx   int32  `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErrorIndex) Reset() {
	*x = ErrorIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorIndex) ProtoMessage() {}

func (x *ErrorIndex) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorIndex.ProtoReflect.Descriptor instead.
func (*ErrorIndex) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{44}
}

func (x *ErrorIndex) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *ErrorIndex) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type BlxrBatchTXReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHashes []*TxIndex    `protobuf:"bytes,1,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"`
	TxErrors []*ErrorIndex `protobuf:"bytes,2,rep,name=tx_errors,json=txErrors,proto3" json:"tx_errors,omitempty"`
}

func (x *BlxrBatchTXReply) Reset() {
	*x = BlxrBatchTXReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlxrBatchTXReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlxrBatchTXReply) ProtoMessage() {}

func (x *BlxrBatchTXReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlxrBatchTXReply.ProtoReflect.Descriptor instead.
func (*BlxrBatchTXReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{45}
}

func (x *BlxrBatchTXReply) GetTxHashes() []*TxIndex {
	if x != nil {
		return x.TxHashes
	}
	return nil
}

func (x *BlxrBatchTXReply) GetTxErrors() []*ErrorIndex {
	if x != nil {
		return x.TxErrors
	}
	return nil
}

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AuthHeader string `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{46}
}

// Deprecated: Do not use.
func (x *StatusRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ExpireDate string `protobuf:"bytes,2,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{47}
}

func (x *AccountInfo) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountInfo) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

type QueuesStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxsQueueCount      uint64 `protobuf:"varint,1,opt,name=txs_queue_count,json=txsQueueCount,proto3" json:"txs_queue_count,omitempty"`
	TxsOrderQueueCount uint64 `protobuf:"varint,2,opt,name=txs_order_queue_count,json=txsOrderQueueCount,proto3" json:"txs_order_queue_count,omitempty"`
}

func (x *QueuesStats) Reset() {
	*x = QueuesStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuesStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuesStats) ProtoMessage() {}

func (x *QueuesStats) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuesStats.ProtoReflect.Descriptor instead.
func (*QueuesStats) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{48}
}

func (x *QueuesStats) GetTxsQueueCount() uint64 {
	if x != nil {
		return x.TxsQueueCount
	}
	return 0
}

func (x *QueuesStats) GetTxsOrderQueueCount() uint64 {
	if x != nil {
		return x.TxsOrderQueueCount
	}
	return 0
}

type NodePerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since                                   string `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	NewBlocksReceivedFromBlockchainNode     uint32 `protobuf:"varint,2,opt,name=new_blocks_received_from_blockchain_node,json=newBlocksReceivedFromBlockchainNode,proto3" json:"new_blocks_received_from_blockchain_node,omitempty"`
	NewBlocksReceivedFromBdn                uint32 `protobuf:"varint,3,opt,name=new_blocks_received_from_bdn,json=newBlocksReceivedFromBdn,proto3" json:"new_blocks_received_from_bdn,omitempty"`
	NewBlocksSeen                           uint32 `protobuf:"varint,4,opt,name=new_blocks_seen,json=newBlocksSeen,proto3" json:"new_blocks_seen,omitempty"`
	NewBlockMessagesFromBlockchainNode      uint32 `protobuf:"varint,5,opt,name=new_block_messages_from_blockchain_node,json=newBlockMessagesFromBlockchainNode,proto3" json:"new_block_messages_from_blockchain_node,omitempty"`
	NewBlockAnnouncementsFromBlockchainNode uint32 `protobuf:"varint,6,opt,name=new_block_announcements_from_blockchain_node,json=newBlockAnnouncementsFromBlockchainNode,proto3" json:"new_block_announcements_from_blockchain_node,omitempty"`
	NewTxReceivedFromBlockchainNode         uint32 `protobuf:"varint,7,opt,name=new_tx_received_from_blockchain_node,json=newTxReceivedFromBlockchainNode,proto3" json:"new_tx_received_from_blockchain_node,omitempty"`
	NewTxReceivedFromBdn                    uint32 `protobuf:"varint,8,opt,name=new_tx_received_from_bdn,json=newTxReceivedFromBdn,proto3" json:"new_tx_received_from_bdn,omitempty"`
	TxSentToNode                            uint32 `protobuf:"varint,9,opt,name=tx_sent_to_node,json=txSentToNode,proto3" json:"tx_sent_to_node,omitempty"`
	DuplicateTxFromNode                     uint32 `protobuf:"varint,10,opt,name=duplicate_tx_from_node,json=duplicateTxFromNode,proto3" json:"duplicate_tx_from_node,omitempty"`
}

func (x *NodePerformance) Reset() {
	*x = NodePerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodePerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodePerformance) ProtoMessage() {}

func (x *NodePerformance) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodePerformance.ProtoReflect.Descriptor instead.
func (*NodePerformance) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{49}
}

func (x *NodePerformance) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *NodePerformance) GetNewBlocksReceivedFromBlockchainNode() uint32 {
	if x != nil {
		return x.NewBlocksReceivedFromBlockchainNode
	}
	return 0
}

func (x *NodePerformance) GetNewBlocksReceivedFromBdn() uint32 {
	if x != nil {
		return x.NewBlocksReceivedFromBdn
	}
	return 0
}

func (x *NodePerformance) GetNewBlocksSeen() uint32 {
	if x != nil {
		return x.NewBlocksSeen
	}
	return 0
}

func (x *NodePerformance) GetNewBlockMessagesFromBlockchainNode() uint32 {
	if x != nil {
		return x.NewBlockMessagesFromBlockchainNode
	}
	return 0
}

func (x *NodePerformance) GetNewBlockAnnouncementsFromBlockchainNode() uint32 {
	if x != nil {
		return x.NewBlockAnnouncementsFromBlockchainNode
	}
	return 0
}

func (x *NodePerformance) GetNewTxReceivedFromBlockchainNode() uint32 {
	if x != nil {
		return x.NewTxReceivedFromBlockchainNode
	}
	return 0
}

func (x *NodePerformance) GetNewTxReceivedFromBdn() uint32 {
	if x != nil {
		return x.NewTxReceivedFromBdn
	}
	return 0
}

func (x *NodePerformance) GetTxSentToNode() uint32 {
	if x != nil {
		return x.TxSentToNode
	}
	return 0
}

func (x *NodePerformance) GetDuplicateTxFromNode() uint32 {
	if x != nil {
		return x.DuplicateTxFromNode
	}
	return 0
}

type WsConnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr       string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	ConnStatus string `protobuf:"bytes,2,opt,name=conn_status,json=connStatus,proto3" json:"conn_status,omitempty"`
	SyncStatus string `protobuf:"bytes,3,opt,name=sync_status,json=syncStatus,proto3" json:"sync_status,omitempty"`
}

func (x *WsConnStatus) Reset() {
	*x = WsConnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WsConnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WsConnStatus) ProtoMessage() {}

func (x *WsConnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WsConnStatus.ProtoReflect.Descriptor instead.
func (*WsConnStatus) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{50}
}

func (x *WsConnStatus) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *WsConnStatus) GetConnStatus() string {
	if x != nil {
		return x.ConnStatus
	}
	return ""
}

func (x *WsConnStatus) GetSyncStatus() string {
	if x != nil {
		return x.SyncStatus
	}
	return ""
}

type NodeConnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnStatus      string           `protobuf:"bytes,1,opt,name=conn_status,json=connStatus,proto3" json:"conn_status,omitempty"`
	WsConnection    *WsConnStatus    `protobuf:"bytes,2,opt,name=ws_connection,json=wsConnection,proto3" json:"ws_connection,omitempty"`
	NodePerformance *NodePerformance `protobuf:"bytes,3,opt,name=node_performance,json=nodePerformance,proto3" json:"node_performance,omitempty"`
	// Inbound is not in use and kept for back compatibility
	Inbound     bool   `protobuf:"varint,4,opt,name=Inbound,proto3" json:"Inbound,omitempty"`
	IsConnected bool   `protobuf:"varint,5,opt,name=IsConnected,proto3" json:"IsConnected,omitempty"`
	Dynamic     bool   `protobuf:"varint,6,opt,name=Dynamic,proto3" json:"Dynamic,omitempty"`
	Version     int64  `protobuf:"varint,7,opt,name=Version,proto3" json:"Version,omitempty"`
	Name        string `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	ConnectedAt string `protobuf:"bytes,9,opt,name=ConnectedAt,proto3" json:"ConnectedAt,omitempty"`
}

func (x *NodeConnStatus) Reset() {
	*x = NodeConnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConnStatus) ProtoMessage() {}

func (x *NodeConnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConnStatus.ProtoReflect.Descriptor instead.
func (*NodeConnStatus) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{51}
}

func (x *NodeConnStatus) GetConnStatus() string {
	if x != nil {
		return x.ConnStatus
	}
	return ""
}

func (x *NodeConnStatus) GetWsConnection() *WsConnStatus {
	if x != nil {
		return x.WsConnection
	}
	return nil
}

func (x *NodeConnStatus) GetNodePerformance() *NodePerformance {
	if x != nil {
		return x.NodePerformance
	}
	return nil
}

func (x *NodeConnStatus) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *NodeConnStatus) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

func (x *NodeConnStatus) GetDynamic() bool {
	if x != nil {
		return x.Dynamic
	}
	return false
}

func (x *NodeConnStatus) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NodeConnStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeConnStatus) GetConnectedAt() string {
	if x != nil {
		return x.ConnectedAt
	}
	return ""
}

type BDNConnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      string             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ConnectedAt string             `protobuf:"bytes,2,opt,name=connected_at,json=connectedAt,proto3" json:"connected_at,omitempty"`
	Latency     *ConnectionLatency `protobuf:"bytes,3,opt,name=latency,proto3" json:"latency,omitempty"`
}

func (x *BDNConnStatus) Reset() {
	*x = BDNConnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BDNConnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BDNConnStatus) ProtoMessage() {}

func (x *BDNConnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BDNConnStatus.ProtoReflect.Descriptor instead.
func (*BDNConnStatus) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{52}
}

func (x *BDNConnStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BDNConnStatus) GetConnectedAt() string {
	if x != nil {
		return x.ConnectedAt
	}
	return ""
}

func (x *BDNConnStatus) GetLatency() *ConnectionLatency {
	if x != nil {
		return x.Latency
	}
	return nil
}

type ConnectionLatency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinMsFromPeer    int64 `protobuf:"varint,7,opt,name=min_ms_from_peer,json=minMsFromPeer,proto3" json:"min_ms_from_peer,omitempty"`
	MinMsToPeer      int64 `protobuf:"varint,8,opt,name=min_ms_to_peer,json=minMsToPeer,proto3" json:"min_ms_to_peer,omitempty"`
	SlowTrafficCount int64 `protobuf:"varint,9,opt,name=slow_traffic_count,json=slowTrafficCount,proto3" json:"slow_traffic_count,omitempty"`
	MinMsRoundTrip   int64 `protobuf:"varint,10,opt,name=min_ms_round_trip,json=minMsRoundTrip,proto3" json:"min_ms_round_trip,omitempty"`
}

func (x *ConnectionLatency) Reset() {
	*x = ConnectionLatency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionLatency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionLatency) ProtoMessage() {}

func (x *ConnectionLatency) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionLatency.ProtoReflect.Descriptor instead.
func (*ConnectionLatency) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{53}
}

func (x *ConnectionLatency) GetMinMsFromPeer() int64 {
	if x != nil {
		return x.MinMsFromPeer
	}
	return 0
}

func (x *ConnectionLatency) GetMinMsToPeer() int64 {
	if x != nil {
		return x.MinMsToPeer
	}
	return 0
}

func (x *ConnectionLatency) GetSlowTrafficCount() int64 {
	if x != nil {
		return x.SlowTrafficCount
	}
	return 0
}

func (x *ConnectionLatency) GetMinMsRoundTrip() int64 {
	if x != nil {
		return x.MinMsRoundTrip
	}
	return 0
}

type GatewayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version          string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	NodeId           string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	IpAddress        string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	TimeStarted      string `protobuf:"bytes,4,opt,name=time_started,json=timeStarted,proto3" json:"time_started,omitempty"`
	Continent        string `protobuf:"bytes,5,opt,name=continent,proto3" json:"continent,omitempty"`
	Country          string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Network          string `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	StartupParams    string `protobuf:"bytes,7,opt,name=startup_params,json=startupParams,proto3" json:"startup_params,omitempty"`
	GatewayPublicKey string `protobuf:"bytes,9,opt,name=gateway_public_key,json=gatewayPublicKey,proto3" json:"gateway_public_key,omitempty"`
}

func (x *GatewayInfo) Reset() {
	*x = GatewayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayInfo) ProtoMessage() {}

func (x *GatewayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayInfo.ProtoReflect.Descriptor instead.
func (*GatewayInfo) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{54}
}

func (x *GatewayInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GatewayInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GatewayInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *GatewayInfo) GetTimeStarted() string {
	if x != nil {
		return x.TimeStarted
	}
	return ""
}

func (x *GatewayInfo) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *GatewayInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GatewayInfo) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GatewayInfo) GetStartupParams() string {
	if x != nil {
		return x.StartupParams
	}
	return ""
}

func (x *GatewayInfo) GetGatewayPublicKey() string {
	if x != nil {
		return x.GatewayPublicKey
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayInfo *GatewayInfo               `protobuf:"bytes,2,opt,name=gateway_info,json=gatewayInfo,proto3" json:"gateway_info,omitempty"`
	Nodes       map[string]*NodeConnStatus `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Relays      map[string]*BDNConnStatus  `protobuf:"bytes,4,rep,name=relays,proto3" json:"relays,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountInfo *AccountInfo               `protobuf:"bytes,1,opt,name=account_info,json=accountInfo,proto3" json:"account_info,omitempty"`
	QueueStats  *QueuesStats               `protobuf:"bytes,5,opt,name=queue_stats,json=queueStats,proto3" json:"queue_stats,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{55}
}

func (x *StatusResponse) GetGatewayInfo() *GatewayInfo {
	if x != nil {
		return x.GatewayInfo
	}
	return nil
}

func (x *StatusResponse) GetNodes() map[string]*NodeConnStatus {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *StatusResponse) GetRelays() map[string]*BDNConnStatus {
	if x != nil {
		return x.Relays
	}
	return nil
}

func (x *StatusResponse) GetAccountInfo() *AccountInfo {
	if x != nil {
		return x.AccountInfo
	}
	return nil
}

func (x *StatusResponse) GetQueueStats() *QueuesStats {
	if x != nil {
		return x.QueueStats
	}
	return nil
}

type TxResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash      string `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	TxContents  string `protobuf:"bytes,2,opt,name=txContents,proto3" json:"txContents,omitempty"`
	LocalRegion bool   `protobuf:"varint,3,opt,name=localRegion,proto3" json:"localRegion,omitempty"`
	Time        string `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	RawTx       string `protobuf:"bytes,5,opt,name=rawTx,proto3" json:"rawTx,omitempty"`
}

func (x *TxResult) Reset() {
	*x = TxResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResult) ProtoMessage() {}

func (x *TxResult) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResult.ProtoReflect.Descriptor instead.
func (*TxResult) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{56}
}

func (x *TxResult) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TxResult) GetTxContents() string {
	if x != nil {
		return x.TxContents
	}
	return ""
}

func (x *TxResult) GetLocalRegion() bool {
	if x != nil {
		return x.LocalRegion
	}
	return false
}

func (x *TxResult) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *TxResult) GetRawTx() string {
	if x != nil {
		return x.RawTx
	}
	return ""
}

type TxHashListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AuthHeader string   `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	TxHashes   [][]byte `protobuf:"bytes,2,rep,name=txHashes,proto3" json:"txHashes,omitempty"`
}

func (x *TxHashListRequest) Reset() {
	*x = TxHashListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxHashListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxHashListRequest) ProtoMessage() {}

func (x *TxHashListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxHashListRequest.ProtoReflect.Descriptor instead.
func (*TxHashListRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{57}
}

// Deprecated: Do not use.
func (x *TxHashListRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *TxHashListRequest) GetTxHashes() [][]byte {
	if x != nil {
		return x.TxHashes
	}
	return nil
}

type ShortIDListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortIDs []uint32 `protobuf:"varint,1,rep,packed,name=shortIDs,proto3" json:"shortIDs,omitempty"`
}

func (x *ShortIDListReply) Reset() {
	*x = ShortIDListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortIDListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortIDListReply) ProtoMessage() {}

func (x *ShortIDListReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortIDListReply.ProtoReflect.Descriptor instead.
func (*ShortIDListReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{58}
}

func (x *ShortIDListReply) GetShortIDs() []uint32 {
	if x != nil {
		return x.ShortIDs
	}
	return nil
}

type ShortIDListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AuthHeader string   `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	ShortIDs   []uint32 `protobuf:"varint,2,rep,packed,name=shortIDs,proto3" json:"shortIDs,omitempty"`
}

func (x *ShortIDListRequest) Reset() {
	*x = ShortIDListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortIDListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortIDListRequest) ProtoMessage() {}

func (x *ShortIDListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortIDListRequest.ProtoReflect.Descriptor instead.
func (*ShortIDListRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{59}
}

// Deprecated: Do not use.
func (x *ShortIDListRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *ShortIDListRequest) GetShortIDs() []uint32 {
	if x != nil {
		return x.ShortIDs
	}
	return nil
}

type TxListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *TxListReply) Reset() {
	*x = TxListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxListReply) ProtoMessage() {}

func (x *TxListReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxListReply.ProtoReflect.Descriptor instead.
func (*TxListReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{60}
}

func (x *TxListReply) GetTxs() [][]byte {
	if x != nil {
		return x.Txs
	}
	return nil
}

type ProposedBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	AuthHeader             string        `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	ValidatorHttpAddress   string        `protobuf:"bytes,2,opt,name=validator_http_address,json=validatorHttpAddress,proto3" json:"validator_http_address,omitempty"`
	Namespace              string        `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	BlockNumber            uint64        `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	PrevBlockHash          string        `protobuf:"bytes,5,opt,name=prev_block_hash,json=prevBlockHash,proto3" json:"prev_block_hash,omitempty"`
	BlockReward            string        `protobuf:"bytes,6,opt,name=block_reward,json=blockReward,proto3" json:"block_reward,omitempty"`
	GasLimit               uint64        `protobuf:"varint,7,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed                uint64        `protobuf:"varint,8,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Payload                []*CompressTx `protobuf:"bytes,9,rep,name=payload,proto3" json:"payload,omitempty"`
	ProcessBlocksOnGateway bool          `protobuf:"varint,10,opt,name=process_blocks_on_gateway,json=processBlocksOnGateway,proto3" json:"process_blocks_on_gateway,omitempty"`
	Id                     string        `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	UnRevertedHashes       [][]byte      `protobuf:"bytes,12,rep,name=un_reverted_hashes,json=unRevertedHashes,proto3" json:"un_reverted_hashes,omitempty"`
}

func (x *ProposedBlockRequest) Reset() {
	*x = ProposedBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposedBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposedBlockRequest) ProtoMessage() {}

func (x *ProposedBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposedBlockRequest.ProtoReflect.Descriptor instead.
func (*ProposedBlockRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{61}
}

// Deprecated: Do not use.
func (x *ProposedBlockRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *ProposedBlockRequest) GetValidatorHttpAddress() string {
	if x != nil {
		return x.ValidatorHttpAddress
	}
	return ""
}

func (x *ProposedBlockRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ProposedBlockRequest) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ProposedBlockRequest) GetPrevBlockHash() string {
	if x != nil {
		return x.PrevBlockHash
	}
	return ""
}

func (x *ProposedBlockRequest) GetBlockReward() string {
	if x != nil {
		return x.BlockReward
	}
	return ""
}

func (x *ProposedBlockRequest) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ProposedBlockRequest) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ProposedBlockRequest) GetPayload() []*CompressTx {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ProposedBlockRequest) GetProcessBlocksOnGateway() bool {
	if x != nil {
		return x.ProcessBlocksOnGateway
	}
	return false
}

func (x *ProposedBlockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProposedBlockRequest) GetUnRevertedHashes() [][]byte {
	if x != nil {
		return x.UnRevertedHashes
	}
	return nil
}

type CompressTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawData []byte `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	ShortId uint32 `protobuf:"varint,2,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`
}

func (x *CompressTx) Reset() {
	*x = CompressTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressTx) ProtoMessage() {}

func (x *CompressTx) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressTx.ProtoReflect.Descriptor instead.
func (*CompressTx) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{62}
}

func (x *CompressTx) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *CompressTx) GetShortId() uint32 {
	if x != nil {
		return x.ShortId
	}
	return 0
}

type ProposedBlockReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorReply     string `protobuf:"bytes,1,opt,name=validator_reply,json=validatorReply,proto3" json:"validator_reply,omitempty"`
	ValidatorReplyTime int64  `protobuf:"varint,2,opt,name=validator_reply_time,json=validatorReplyTime,proto3" json:"validator_reply_time,omitempty"`
}

func (x *ProposedBlockReply) Reset() {
	*x = ProposedBlockReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposedBlockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposedBlockReply) ProtoMessage() {}

func (x *ProposedBlockReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposedBlockReply.ProtoReflect.Descriptor instead.
func (*ProposedBlockReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{63}
}

func (x *ProposedBlockReply) GetValidatorReply() string {
	if x != nil {
		return x.ValidatorReply
	}
	return ""
}

func (x *ProposedBlockReply) GetValidatorReplyTime() int64 {
	if x != nil {
		return x.ValidatorReplyTime
	}
	return 0
}

type BlockInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthHeader       string                 `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	StartSendingTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_sending_time,json=startSendingTime,proto3" json:"start_sending_time,omitempty"`
	BlockNumber      uint64                 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *BlockInfoRequest) Reset() {
	*x = BlockInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfoRequest) ProtoMessage() {}

func (x *BlockInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfoRequest.ProtoReflect.Descriptor instead.
func (*BlockInfoRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{64}
}

func (x *BlockInfoRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *BlockInfoRequest) GetStartSendingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartSendingTime
	}
	return nil
}

func (x *BlockInfoRequest) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type BlockInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockInfoReply) Reset() {
	*x = BlockInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfoReply) ProtoMessage() {}

func (x *BlockInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfoReply.ProtoReflect.Descriptor instead.
func (*BlockInfoReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{65}
}

type ProposedBlockStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthHeader  string `protobuf:"bytes,1,opt,name=auth_header,json=authHeader,proto3" json:"auth_header,omitempty"`
	BlockNumber uint64 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *ProposedBlockStatsRequest) Reset() {
	*x = ProposedBlockStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposedBlockStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposedBlockStatsRequest) ProtoMessage() {}

func (x *ProposedBlockStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposedBlockStatsRequest.ProtoReflect.Descriptor instead.
func (*ProposedBlockStatsRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{66}
}

func (x *ProposedBlockStatsRequest) GetAuthHeader() string {
	if x != nil {
		return x.AuthHeader
	}
	return ""
}

func (x *ProposedBlockStatsRequest) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

type ProposedBlockStatsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SendingDuration    *durationpb.Duration   `protobuf:"bytes,2,opt,name=sending_duration,json=sendingDuration,proto3" json:"sending_duration,omitempty"`
	ReceivedTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	SentTime           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=sent_time,json=sentTime,proto3" json:"sent_time,omitempty"`
	ValidatorReply     string                 `protobuf:"bytes,5,opt,name=validator_reply,json=validatorReply,proto3" json:"validator_reply,omitempty"`
	ValidatorReplyTime int64                  `protobuf:"varint,6,opt,name=validator_reply_time,json=validatorReplyTime,proto3" json:"validator_reply_time,omitempty"`
}

func (x *ProposedBlockStatsReply) Reset() {
	*x = ProposedBlockStatsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposedBlockStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposedBlockStatsReply) ProtoMessage() {}

func (x *ProposedBlockStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposedBlockStatsReply.ProtoReflect.Descriptor instead.
func (*ProposedBlockStatsReply) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{67}
}

func (x *ProposedBlockStatsReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProposedBlockStatsReply) GetSendingDuration() *durationpb.Duration {
	if x != nil {
		return x.SendingDuration
	}
	return nil
}

func (x *ProposedBlockStatsReply) GetReceivedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedTime
	}
	return nil
}

func (x *ProposedBlockStatsReply) GetSentTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SentTime
	}
	return nil
}

func (x *ProposedBlockStatsReply) GetValidatorReply() string {
	if x != nil {
		return x.ValidatorReply
	}
	return ""
}

func (x *ProposedBlockStatsReply) GetValidatorReplyTime() int64 {
	if x != nil {
		return x.ValidatorReplyTime
	}
	return 0
}

var File_gateway_proto protoreflect.FileDescriptor

var file_gateway_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x06, 0x54, 0x78,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x11, 0x54,
	0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x80, 0x04, 0x0a, 0x0f, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x4b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x4b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f,
	0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c,
	0x6f, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x45, 0x74, 0x68, 0x4f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x0f, 0x45, 0x74, 0x68, 0x4f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xc9, 0x03, 0x0a, 0x17,
	0x42, 0x6c, 0x78, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x6d, 0x65, 0x76, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x78, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x76, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6d, 0x65, 0x76, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x65, 0x76, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x15, 0x42, 0x6c, 0x78, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x67, 0x0a, 0x0a, 0x54, 0x78, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x02, 0x54, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x61, 0x77, 0x5f, 0x74, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x54, 0x78, 0x22, 0x4a, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x27,
	0x0a, 0x08, 0x54, 0x78, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x02, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x22, 0x50, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xa7, 0x04, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x33, 0x5f, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x68, 0x61, 0x33, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x69, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x67, 0x61, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x46,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x22, 0x75, 0x0a, 0x13, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x7d, 0x0a, 0x0a, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb3, 0x02, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x15, 0x66, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x22,
	0x98, 0x01, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x1a, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x3b, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x82, 0x02,
	0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x22, 0x51, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x35, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x0c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x32, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x0b, 0x0a, 0x09, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x47, 0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x60, 0x0a, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x6e, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x65,
	0x44, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x44, 0x61,
	0x79, 0x22, 0xa2, 0x08, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x54, 0x6f, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x73, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69,
	0x6e, 0x55, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x76, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x76, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x76, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x15,
	0x75, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x70,
	0x61, 0x69, 0x64, 0x54, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x61,
	0x69, 0x64, 0x54, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55,
	0x0a, 0x1c, 0x75, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x18, 0x75, 0x6e, 0x70,
	0x61, 0x69, 0x64, 0x54, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x1a, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x78,
	0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x16, 0x70, 0x61, 0x69, 0x64, 0x54, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x74, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x10, 0x70, 0x61, 0x69,
	0x64, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x47, 0x0a,
	0x14, 0x75, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x12, 0x75, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x76, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x76, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x54, 0x78, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x78, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53,
	0x65, 0x65, 0x6e, 0x54, 0x78, 0x73, 0x22, 0x31, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x77, 0x0a,
	0x0d, 0x42, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x78, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x42, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x78, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x22, 0x35, 0x0a, 0x0e, 0x54, 0x78, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0xa4, 0x01, 0x0a, 0x12, 0x54, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x42, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6f,
	0x6c, 0x64, 0x65, 0x73, 0x74, 0x54, 0x78, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x54, 0x78, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x0b, 0x54, 0x78, 0x41,
	0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0xa5, 0x03, 0x0a, 0x12, 0x42, 0x6c, 0x78, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x18, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcf, 0x02, 0x0a, 0x0d, 0x42,
	0x6c, 0x78, 0x72, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0b,
	0x42, 0x6c, 0x78, 0x72, 0x54, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x34, 0x0a, 0x07, 0x54, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64,
	0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x34, 0x0a, 0x0a, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x73, 0x0a, 0x10, 0x42, 0x6c, 0x78, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x58, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x08, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x08, 0x74, 0x78, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x34, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x68, 0x0a, 0x0b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x78, 0x73,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x74, 0x78, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x78, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x74, 0x78, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x04, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x28, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x23, 0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x62, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e, 0x65, 0x77,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x42, 0x64, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x53, 0x0a,
	0x27, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22,
	0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x5d, 0x0a, 0x2c, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x27, 0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x24, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1f, 0x6e, 0x65, 0x77, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x64, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x64, 0x6e, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x78, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x78, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x33, 0x0a, 0x16, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x78, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x78, 0x46, 0x72, 0x6f, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x22, 0x64, 0x0a, 0x0c, 0x57, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x0e, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a,
	0x0a, 0x0d, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x57, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x77, 0x73,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f,
	0x6e, 0x6f, 0x64, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x42, 0x44, 0x4e, 0x43, 0x6f, 0x6e,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4d, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6d,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x4d, 0x73, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x6c, 0x6f, 0x77, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69,
	0x6e, 0x5f, 0x6d, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4d, 0x73, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x69, 0x70, 0x22, 0xa9, 0x02, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0xd6, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x42, 0x44, 0x4e, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x54,
	0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x54, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x77, 0x54, 0x78, 0x22, 0x54, 0x0a, 0x11, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x22, 0x2e, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44,
	0x73, 0x22, 0x55, 0x0a, 0x12, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x73, 0x22, 0x1f, 0x0a, 0x0b, 0x54, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x78, 0x73, 0x22, 0xdd, 0x03, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x74, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x78, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x4f, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75,
	0x6e, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x75, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa0,
	0x01, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x10, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x5f, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xc4, 0x02, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x8e, 0x0c, 0x0a, 0x07,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x42, 0x6c, 0x78, 0x72, 0x54,
	0x78, 0x12, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x78, 0x72,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x78, 0x72, 0x54, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0b, 0x42, 0x6c, 0x78, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x58,
	0x12, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x78, 0x72, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x58, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x78, 0x72, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x58, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x05, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0e, 0x54, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x54, 0x78, 0x12, 0x20,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x78, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x78,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x06, 0x4e, 0x65, 0x77,
	0x54, 0x78, 0x73, 0x12, 0x13, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x54, 0x78, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x38, 0x0a, 0x0a, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x73, 0x12, 0x13, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x4e, 0x65, 0x77,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x42, 0x64, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x45, 0x74, 0x68, 0x4f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x45, 0x74, 0x68, 0x4f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x45, 0x74, 0x68, 0x4f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x46, 0x0a, 0x0a, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x1a, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x49, 0x44, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x54,
	0x78, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x73, 0x12, 0x1b,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x42, 0x6c, 0x78, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x42, 0x6c, 0x78, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6c, 0x78, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6c, 0x6f, 0x58, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_gateway_proto_rawDescOnce sync.Once
	file_gateway_proto_rawDescData = file_gateway_proto_rawDesc
)

func file_gateway_proto_rawDescGZIP() []byte {
	file_gateway_proto_rawDescOnce.Do(func() {
		file_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_gateway_proto_rawDescData)
	})
	return file_gateway_proto_rawDescData
}

var file_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_gateway_proto_goTypes = []interface{}{
	(*TxLogs)(nil),                       // 0: gateway.TxLogs
	(*TxReceiptsRequest)(nil),            // 1: gateway.TxReceiptsRequest
	(*TxReceiptsReply)(nil),              // 2: gateway.TxReceiptsReply
	(*CallParams)(nil),                   // 3: gateway.CallParams
	(*EthOnBlockRequest)(nil),            // 4: gateway.EthOnBlockRequest
	(*EthOnBlockReply)(nil),              // 5: gateway.EthOnBlockReply
	(*BlxrSubmitBundleRequest)(nil),      // 6: gateway.BlxrSubmitBundleRequest
	(*BlxrSubmitBundleReply)(nil),        // 7: gateway.BlxrSubmitBundleReply
	(*TxsRequest)(nil),                   // 8: gateway.TxsRequest
	(*Tx)(nil),                           // 9: gateway.Tx
	(*AccessTuple)(nil),                  // 10: gateway.AccessTuple
	(*TxsReply)(nil),                     // 11: gateway.TxsReply
	(*BlocksRequest)(nil),                // 12: gateway.BlocksRequest
	(*BlockHeader)(nil),                  // 13: gateway.BlockHeader
	(*FutureValidatorInfo)(nil),          // 14: gateway.FutureValidatorInfo
	(*Withdrawal)(nil),                   // 15: gateway.Withdrawal
	(*BlocksReply)(nil),                  // 16: gateway.BlocksReply
	(*DisconnectInboundPeerRequest)(nil), // 17: gateway.DisconnectInboundPeerRequest
	(*DisconnectInboundPeerReply)(nil),   // 18: gateway.DisconnectInboundPeerReply
	(*SubscriptionsRequest)(nil),         // 19: gateway.SubscriptionsRequest
	(*Subscription)(nil),                 // 20: gateway.Subscription
	(*SubscriptionsReply)(nil),           // 21: gateway.SubscriptionsReply
	(*VersionRequest)(nil),               // 22: gateway.VersionRequest
	(*VersionReply)(nil),                 // 23: gateway.VersionReply
	(*StopRequest)(nil),                  // 24: gateway.StopRequest
	(*StopReply)(nil),                    // 25: gateway.StopReply
	(*PeersRequest)(nil),                 // 26: gateway.PeersRequest
	(*RateSnapshot)(nil),                 // 27: gateway.RateSnapshot
	(*Peer)(nil),                         // 28: gateway.Peer
	(*PeersReply)(nil),                   // 29: gateway.PeersReply
	(*SendTXRequest)(nil),                // 30: gateway.SendTXRequest
	(*Transaction)(nil),                  // 31: gateway.Transaction
	(*Transactions)(nil),                 // 32: gateway.Transactions
	(*BxTransaction)(nil),                // 33: gateway.BxTransaction
	(*GetBxTransactionRequest)(nil),      // 34: gateway.GetBxTransactionRequest
	(*GetBxTransactionResponse)(nil),     // 35: gateway.GetBxTransactionResponse
	(*TxStoreRequest)(nil),               // 36: gateway.TxStoreRequest
	(*TxStoreNetworkData)(nil),           // 37: gateway.TxStoreNetworkData
	(*TxStoreReply)(nil),                 // 38: gateway.TxStoreReply
	(*TxAndSender)(nil),                  // 39: gateway.TxAndSender
	(*BlxrBatchTXRequest)(nil),           // 40: gateway.BlxrBatchTXRequest
	(*BlxrTxRequest)(nil),                // 41: gateway.BlxrTxRequest
	(*BlxrTxReply)(nil),                  // 42: gateway.BlxrTxReply
	(*TxIndex)(nil),                      // 43: gateway.TxIndex
	(*ErrorIndex)(nil),                   // 44: gateway.ErrorIndex
	(*BlxrBatchTXReply)(nil),             // 45: gateway.BlxrBatchTXReply
	(*StatusRequest)(nil),                // 46: gateway.StatusRequest
	(*AccountInfo)(nil),                  // 47: gateway.AccountInfo
	(*QueuesStats)(nil),                  // 48: gateway.QueuesStats
	(*NodePerformance)(nil),              // 49: gateway.NodePerformance
	(*WsConnStatus)(nil),                 // 50: gateway.WsConnStatus
	(*NodeConnStatus)(nil),               // 51: gateway.NodeConnStatus
	(*BDNConnStatus)(nil),                // 52: gateway.BDNConnStatus
	(*ConnectionLatency)(nil),            // 53: gateway.ConnectionLatency
	(*GatewayInfo)(nil),                  // 54: gateway.GatewayInfo
	(*StatusResponse)(nil),               // 55: gateway.StatusResponse
	(*TxResult)(nil),                     // 56: gateway.TxResult
	(*TxHashListRequest)(nil),            // 57: gateway.TxHashListRequest
	(*ShortIDListReply)(nil),             // 58: gateway.ShortIDListReply
	(*ShortIDListRequest)(nil),           // 59: gateway.ShortIDListRequest
	(*TxListReply)(nil),                  // 60: gateway.TxListReply
	(*ProposedBlockRequest)(nil),         // 61: gateway.ProposedBlockRequest
	(*CompressTx)(nil),                   // 62: gateway.CompressTx
	(*ProposedBlockReply)(nil),           // 63: gateway.ProposedBlockReply
	(*BlockInfoRequest)(nil),             // 64: gateway.BlockInfoRequest
	(*BlockInfoReply)(nil),               // 65: gateway.BlockInfoReply
	(*ProposedBlockStatsRequest)(nil),    // 66: gateway.ProposedBlockStatsRequest
	(*ProposedBlockStatsReply)(nil),      // 67: gateway.ProposedBlockStatsReply
	nil,                                  // 68: gateway.CallParams.ParamsEntry
	nil,                                  // 69: gateway.BlxrSubmitBundleRequest.MevBuildersEntry
	nil,                                  // 70: gateway.StatusResponse.NodesEntry
	nil,                                  // 71: gateway.StatusResponse.RelaysEntry
	(*timestamppb.Timestamp)(nil),        // 72: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),          // 73: google.protobuf.Duration
}
var file_gateway_proto_depIdxs = []int32{
	0,  // 0: gateway.TxReceiptsReply.logs:type_name -> gateway.TxLogs
	68, // 1: gateway.CallParams.params:type_name -> gateway.CallParams.ParamsEntry
	3,  // 2: gateway.EthOnBlockRequest.call_params:type_name -> gateway.CallParams
	69, // 3: gateway.BlxrSubmitBundleRequest.mev_builders:type_name -> gateway.BlxrSubmitBundleRequest.MevBuildersEntry
	9,  // 4: gateway.TxsReply.tx:type_name -> gateway.Tx
	13, // 5: gateway.BlocksReply.header:type_name -> gateway.BlockHeader
	14, // 6: gateway.BlocksReply.future_validator_info:type_name -> gateway.FutureValidatorInfo
	9,  // 7: gateway.BlocksReply.transaction:type_name -> gateway.Tx
	15, // 8: gateway.BlocksReply.withdrawals:type_name -> gateway.Withdrawal
	20, // 9: gateway.SubscriptionsReply.subscriptions:type_name -> gateway.Subscription
	27, // 10: gateway.Peer.unpaid_tx_burst_limit_excess:type_name -> gateway.RateSnapshot
	27, // 11: gateway.Peer.paid_tx_burst_limit_excess:type_name -> gateway.RateSnapshot
	27, // 12: gateway.Peer.paid_tx_throughput:type_name -> gateway.RateSnapshot
	27, // 13: gateway.Peer.unpaid_tx_throughput:type_name -> gateway.RateSnapshot
	28, // 14: gateway.PeersReply.peers:type_name -> gateway.Peer
	31, // 15: gateway.Transactions.transactions:type_name -> gateway.Transaction
	72, // 16: gateway.BxTransaction.add_time:type_name -> google.protobuf.Timestamp
	33, // 17: gateway.GetBxTransactionResponse.tx:type_name -> gateway.BxTransaction
	33, // 18: gateway.TxStoreNetworkData.oldest_tx:type_name -> gateway.BxTransaction
	37, // 19: gateway.TxStoreReply.network_data:type_name -> gateway.TxStoreNetworkData
	39, // 20: gateway.BlxrBatchTXRequest.transactions_and_senders:type_name -> gateway.TxAndSender
	43, // 21: gateway.BlxrBatchTXReply.tx_hashes:type_name -> gateway.TxIndex
	44, // 22: gateway.BlxrBatchTXReply.tx_errors:type_name -> gateway.ErrorIndex
	50, // 23: gateway.NodeConnStatus.ws_connection:type_name -> gateway.WsConnStatus
	49, // 24: gateway.NodeConnStatus.node_performance:type_name -> gateway.NodePerformance
	53, // 25: gateway.BDNConnStatus.latency:type_name -> gateway.ConnectionLatency
	54, // 26: gateway.StatusResponse.gateway_info:type_name -> gateway.GatewayInfo
	70, // 27: gateway.StatusResponse.nodes:type_name -> gateway.StatusResponse.NodesEntry
	71, // 28: gateway.StatusResponse.relays:type_name -> gateway.StatusResponse.RelaysEntry
	47, // 29: gateway.StatusResponse.account_info:type_name -> gateway.AccountInfo
	48, // 30: gateway.StatusResponse.queue_stats:type_name -> gateway.QueuesStats
	62, // 31: gateway.ProposedBlockRequest.payload:type_name -> gateway.CompressTx
	72, // 32: gateway.BlockInfoRequest.start_sending_time:type_name -> google.protobuf.Timestamp
	73, // 33: gateway.ProposedBlockStatsReply.sending_duration:type_name -> google.protobuf.Duration
	72, // 34: gateway.ProposedBlockStatsReply.received_time:type_name -> google.protobuf.Timestamp
	72, // 35: gateway.ProposedBlockStatsReply.sent_time:type_name -> google.protobuf.Timestamp
	51, // 36: gateway.StatusResponse.NodesEntry.value:type_name -> gateway.NodeConnStatus
	52, // 37: gateway.StatusResponse.RelaysEntry.value:type_name -> gateway.BDNConnStatus
	41, // 38: gateway.Gateway.BlxrTx:input_type -> gateway.BlxrTxRequest
	40, // 39: gateway.Gateway.BlxrBatchTX:input_type -> gateway.BlxrBatchTXRequest
	26, // 40: gateway.Gateway.Peers:input_type -> gateway.PeersRequest
	36, // 41: gateway.Gateway.TxStoreSummary:input_type -> gateway.TxStoreRequest
	34, // 42: gateway.Gateway.GetTx:input_type -> gateway.GetBxTransactionRequest
	24, // 43: gateway.Gateway.Stop:input_type -> gateway.StopRequest
	22, // 44: gateway.Gateway.Version:input_type -> gateway.VersionRequest
	46, // 45: gateway.Gateway.Status:input_type -> gateway.StatusRequest
	19, // 46: gateway.Gateway.Subscriptions:input_type -> gateway.SubscriptionsRequest
	17, // 47: gateway.Gateway.DisconnectInboundPeer:input_type -> gateway.DisconnectInboundPeerRequest
	8,  // 48: gateway.Gateway.NewTxs:input_type -> gateway.TxsRequest
	8,  // 49: gateway.Gateway.PendingTxs:input_type -> gateway.TxsRequest
	12, // 50: gateway.Gateway.NewBlocks:input_type -> gateway.BlocksRequest
	12, // 51: gateway.Gateway.BdnBlocks:input_type -> gateway.BlocksRequest
	4,  // 52: gateway.Gateway.EthOnBlock:input_type -> gateway.EthOnBlockRequest
	1,  // 53: gateway.Gateway.TxReceipts:input_type -> gateway.TxReceiptsRequest
	57, // 54: gateway.Gateway.ShortIDs:input_type -> gateway.TxHashListRequest
	61, // 55: gateway.Gateway.ProposedBlock:input_type -> gateway.ProposedBlockRequest
	59, // 56: gateway.Gateway.TxsFromShortIDs:input_type -> gateway.ShortIDListRequest
	64, // 57: gateway.Gateway.BlockInfo:input_type -> gateway.BlockInfoRequest
	66, // 58: gateway.Gateway.ProposedBlockStats:input_type -> gateway.ProposedBlockStatsRequest
	6,  // 59: gateway.Gateway.BlxrSubmitBundle:input_type -> gateway.BlxrSubmitBundleRequest
	42, // 60: gateway.Gateway.BlxrTx:output_type -> gateway.BlxrTxReply
	45, // 61: gateway.Gateway.BlxrBatchTX:output_type -> gateway.BlxrBatchTXReply
	29, // 62: gateway.Gateway.Peers:output_type -> gateway.PeersReply
	38, // 63: gateway.Gateway.TxStoreSummary:output_type -> gateway.TxStoreReply
	35, // 64: gateway.Gateway.GetTx:output_type -> gateway.GetBxTransactionResponse
	25, // 65: gateway.Gateway.Stop:output_type -> gateway.StopReply
	23, // 66: gateway.Gateway.Version:output_type -> gateway.VersionReply
	55, // 67: gateway.Gateway.Status:output_type -> gateway.StatusResponse
	21, // 68: gateway.Gateway.Subscriptions:output_type -> gateway.SubscriptionsReply
	18, // 69: gateway.Gateway.DisconnectInboundPeer:output_type -> gateway.DisconnectInboundPeerReply
	11, // 70: gateway.Gateway.NewTxs:output_type -> gateway.TxsReply
	11, // 71: gateway.Gateway.PendingTxs:output_type -> gateway.TxsReply
	16, // 72: gateway.Gateway.NewBlocks:output_type -> gateway.BlocksReply
	16, // 73: gateway.Gateway.BdnBlocks:output_type -> gateway.BlocksReply
	5,  // 74: gateway.Gateway.EthOnBlock:output_type -> gateway.EthOnBlockReply
	2,  // 75: gateway.Gateway.TxReceipts:output_type -> gateway.TxReceiptsReply
	58, // 76: gateway.Gateway.ShortIDs:output_type -> gateway.ShortIDListReply
	63, // 77: gateway.Gateway.ProposedBlock:output_type -> gateway.ProposedBlockReply
	60, // 78: gateway.Gateway.TxsFromShortIDs:output_type -> gateway.TxListReply
	65, // 79: gateway.Gateway.BlockInfo:output_type -> gateway.BlockInfoReply
	67, // 80: gateway.Gateway.ProposedBlockStats:output_type -> gateway.ProposedBlockStatsReply
	7,  // 81: gateway.Gateway.BlxrSubmitBundle:output_type -> gateway.BlxrSubmitBundleReply
	60, // [60:82] is the sub-list for method output_type
	38, // [38:60] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_gateway_proto_init() }
func file_gateway_proto_init() {
	if File_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxReceiptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxReceiptsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthOnBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthOnBlockReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlxrSubmitBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlxrSubmitBundleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureValidatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectInboundPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectInboundPeerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTXRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BxTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBxTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBxTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxStoreNetworkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxStoreReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxAndSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlxrBatchTXRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlxrTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlxrTxReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlxrBatchTXReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuesStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodePerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WsConnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BDNConnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionLatency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxHashListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortIDListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortIDListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposedBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposedBlockReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposedBlockStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposedBlockStatsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gateway_proto_goTypes,
		DependencyIndexes: file_gateway_proto_depIdxs,
		MessageInfos:      file_gateway_proto_msgTypes,
	}.Build()
	File_gateway_proto = out.File
	file_gateway_proto_rawDesc = nil
	file_gateway_proto_goTypes = nil
	file_gateway_proto_depIdxs = nil
}
