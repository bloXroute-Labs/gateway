package bxmessage

import (
	"github.com/bloXroute-Labs/gateway/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

// msg bytes generated by python gateway BDNPerformanceStatsMessage serialization
var BDNStatsMsgBytes = []byte("\xff\xfe\xfd\xfcbdnstats\x00\x00\x00\x00y\x00\x00\x00W\xe8\xf6\xde\x005\xd8A`\xea\xf6\xde\x005\xd8Ad\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x7f\x00\x00\x01A\x1f\x14\x00\x1e\x00(\x00\x00\x002\x00\x00\x00\n\x00\x00\x00\n\x00\x00\x00\x14\x00\x00\x00d\x00\x00\x002\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xac\x11\x00\x01B\x1f\x15\x00\x1f\x00)\x00\x00\x003\x00\x00\x00\x0b\x00\x00\x00\x0b\x00\x00\x00\x15\x00\x00\x00e\x00\x00\x003\x00\x00\x003\x00\x14\x00\x01")

func TestBdnPerformanceStats_Unpack(t *testing.T) {
	bdnStats := BdnPerformanceStats{}
	err := bdnStats.Unpack(BDNStatsMsgBytes, 24)
	assert.Nil(t, err)
	assert.Equal(t, uint16(100), bdnStats.memoryUtilizationMb)
	assert.Equal(t, 2, len(bdnStats.nodeStats))
	ipEndpoint := types.NodeEndpoint{
		IP:   "127.0.0.1",
		Port: 8001,
	}

	nodeStats, _ := bdnStats.nodeStats[ipEndpoint.IPPort()]
	assert.Equal(t, uint16(20), nodeStats.NewBlocksReceivedFromBlockchainNode)
	assert.Equal(t, uint16(30), nodeStats.NewBlocksReceivedFromBdn)
	assert.Equal(t, uint32(40), nodeStats.NewTxReceivedFromBlockchainNode)
	assert.Equal(t, uint32(50), nodeStats.NewTxReceivedFromBdn)
	assert.Equal(t, uint32(10), nodeStats.NewBlocksSeen)
	assert.Equal(t, uint32(10), nodeStats.NewBlockMessagesFromBlockchainNode)
	assert.Equal(t, uint32(20), nodeStats.NewBlockAnnouncementsFromBlockchainNode)
	assert.Equal(t, uint32(100), nodeStats.TxSentToNode)
	assert.Equal(t, uint32(50), nodeStats.DuplicateTxFromNode)

	ipEndpoint2 := types.NodeEndpoint{
		IP:   "172.17.0.1",
		Port: 8002,
	}
	nodeStats2, _ := bdnStats.nodeStats[ipEndpoint2.IPPort()]
	assert.Equal(t, uint16(21), nodeStats2.NewBlocksReceivedFromBlockchainNode)
	assert.Equal(t, uint16(31), nodeStats2.NewBlocksReceivedFromBdn)
	assert.Equal(t, uint32(41), nodeStats2.NewTxReceivedFromBlockchainNode)
	assert.Equal(t, uint32(51), nodeStats2.NewTxReceivedFromBdn)
	assert.Equal(t, uint32(11), nodeStats2.NewBlocksSeen)
	assert.Equal(t, uint32(11), nodeStats2.NewBlockMessagesFromBlockchainNode)
	assert.Equal(t, uint32(21), nodeStats2.NewBlockAnnouncementsFromBlockchainNode)
	assert.Equal(t, uint32(101), nodeStats2.TxSentToNode)
	assert.Equal(t, uint32(51), nodeStats2.DuplicateTxFromNode)
}

func TestBdnPerformanceStats_UnpackBurstLimit(t *testing.T) {
	bdnStats := BdnPerformanceStats{}
	err := bdnStats.Unpack(BDNStatsMsgBytes, 25)
	assert.Nil(t, err)
	assert.Equal(t, uint16(100), bdnStats.memoryUtilizationMb)
	assert.Equal(t, 2, len(bdnStats.nodeStats))
	ipEndpoint := types.NodeEndpoint{
		IP:   "127.0.0.1",
		Port: 8001,
	}

	nodeStats, _ := bdnStats.nodeStats[ipEndpoint.IPPort()]
	assert.Equal(t, uint16(20), nodeStats.NewBlocksReceivedFromBlockchainNode)
	assert.Equal(t, uint16(30), nodeStats.NewBlocksReceivedFromBdn)
	assert.Equal(t, uint32(40), nodeStats.NewTxReceivedFromBlockchainNode)
	assert.Equal(t, uint32(50), nodeStats.NewTxReceivedFromBdn)
	assert.Equal(t, uint32(10), nodeStats.NewBlocksSeen)
	assert.Equal(t, uint32(10), nodeStats.NewBlockMessagesFromBlockchainNode)
	assert.Equal(t, uint32(20), nodeStats.NewBlockAnnouncementsFromBlockchainNode)
	assert.Equal(t, uint32(100), nodeStats.TxSentToNode)
	assert.Equal(t, uint32(50), nodeStats.DuplicateTxFromNode)

	ipEndpoint2 := types.NodeEndpoint{
		IP:   "172.17.0.1",
		Port: 8002,
	}
	nodeStats2, _ := bdnStats.nodeStats[ipEndpoint2.IPPort()]
	assert.Equal(t, uint16(21), nodeStats2.NewBlocksReceivedFromBlockchainNode)
	assert.Equal(t, uint16(31), nodeStats2.NewBlocksReceivedFromBdn)
	assert.Equal(t, uint32(41), nodeStats2.NewTxReceivedFromBlockchainNode)
	assert.Equal(t, uint32(51), nodeStats2.NewTxReceivedFromBdn)
	assert.Equal(t, uint32(11), nodeStats2.NewBlocksSeen)
	assert.Equal(t, uint32(11), nodeStats2.NewBlockMessagesFromBlockchainNode)
	assert.Equal(t, uint32(21), nodeStats2.NewBlockAnnouncementsFromBlockchainNode)
	assert.Equal(t, uint32(101), nodeStats2.TxSentToNode)
	assert.Equal(t, uint32(51), nodeStats2.DuplicateTxFromNode)

	assert.Equal(t, uint16(51), bdnStats.burstLimitedTransactionsPaid)
	assert.Equal(t, uint16(20), bdnStats.burstLimitedTransactionsUnpaid)
}

func TestBdnPerformanceStats_Pack(t *testing.T) {
	bdnStatsFromBytes := BdnPerformanceStats{}
	err := bdnStatsFromBytes.Unpack(BDNStatsMsgBytes, 24)
	require.NoError(t, err)

	bdnStats := NewBDNStats()
	bdnStats.intervalStartTime = bdnStatsFromBytes.intervalStartTime
	bdnStats.intervalEndTime = bdnStatsFromBytes.intervalEndTime
	bdnStats.memoryUtilizationMb = 100
	endpoint1 := types.NodeEndpoint{IP: "127.0.0.1", Port: 8001}
	nodeStats1 := BdnPerformanceStatsData{
		NewBlocksReceivedFromBlockchainNode:     20,
		NewBlocksReceivedFromBdn:                30,
		NewBlocksSeen:                           10,
		NewBlockMessagesFromBlockchainNode:      10,
		NewBlockAnnouncementsFromBlockchainNode: 20,
		NewTxReceivedFromBlockchainNode:         40,
		NewTxReceivedFromBdn:                    50,
		TxSentToNode:                            100,
		DuplicateTxFromNode:                     50,
	}
	bdnStats.nodeStats[endpoint1.IPPort()] = &nodeStats1

	packed, err := bdnStats.Pack(24)
	require.NoError(t, err)

	// Pack loops over the map which order is not defined, testing with single nodeStat
	packedBytes := []byte{255, 254, 253, 252, 98, 100, 110, 115, 116, 97, 116, 115, 0, 0, 0, 0, 71, 0, 0, 0, 87, 232, 246, 222, 0, 53, 216, 65, 96, 234, 246, 222, 0, 53, 216, 65, 100, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 127, 0, 0, 1, 65, 31, 20, 0, 30, 0, 40, 0, 0, 0, 50, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 20, 0, 0, 0, 100, 0, 0, 0, 50, 0, 0, 0, 1}
	assert.Equal(t, packedBytes, packed)
	assert.Nil(t, err)
}

func TestBdnPerformanceStats_Pack_BurstLimitTx(t *testing.T) {
	bdnStatsFromBytes := BdnPerformanceStats{}
	err := bdnStatsFromBytes.Unpack(BDNStatsMsgBytes, 25)
	require.NoError(t, err)

	bdnStats := NewBDNStats()
	bdnStats.intervalStartTime = bdnStatsFromBytes.intervalStartTime
	bdnStats.intervalEndTime = bdnStatsFromBytes.intervalEndTime
	bdnStats.memoryUtilizationMb = 100
	endpoint1 := types.NodeEndpoint{IP: "127.0.0.1", Port: 8001}
	nodeStats1 := BdnPerformanceStatsData{
		NewBlocksReceivedFromBlockchainNode:     20,
		NewBlocksReceivedFromBdn:                30,
		NewBlocksSeen:                           10,
		NewBlockMessagesFromBlockchainNode:      10,
		NewBlockAnnouncementsFromBlockchainNode: 20,
		NewTxReceivedFromBlockchainNode:         40,
		NewTxReceivedFromBdn:                    50,
		TxSentToNode:                            100,
		DuplicateTxFromNode:                     50,
	}
	bdnStats.nodeStats[endpoint1.IPPort()] = &nodeStats1
	bdnStats.burstLimitedTransactionsPaid = 51
	bdnStats.burstLimitedTransactionsUnpaid = 20

	packed, err := bdnStats.Pack(25)
	require.NoError(t, err)

	// Pack loops over the map which order is not defined, testing with single nodeStat
	packedBytes := []byte{255, 254, 253, 252, 98, 100, 110, 115, 116, 97, 116, 115, 0, 0, 0, 0, 75, 0, 0, 0, 87, 232, 246, 222, 0, 53, 216, 65, 96, 234, 246, 222, 0, 53, 216, 65, 100, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 127, 0, 0, 1, 65, 31, 20, 0, 30, 0, 40, 0, 0, 0, 50, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 20, 0, 0, 0, 100, 0, 0, 0, 50, 0, 0, 0, 51, 0, 20, 0, 1}
	assert.Equal(t, packedBytes, packed)
	assert.Nil(t, err)
}

func TestBdnPerformanceStats_UnpackBadBuffer(t *testing.T) {
	bdnStats := BdnPerformanceStats{}
	// truncated msg bytes
	var bdnStatsMsgBytes = []byte("\xff\xfe\xfd\xfcbdnstats\x00\x00\x00\x00y\x00\x00\x00W\xe8\xf6\xde\x005\xd8A`\xea\xf6\xde\x005\xd8Ad\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x7f\x00\x00\x01A\x1f\x14\x00\x1e\x00(\x00\x00\x002\x00\x00\x00\n\x00\x00\x00\n\x00\x00\x00\x14\x00\x00\x00d\x00\x00\x002\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xac\x11\x00\x01B\x1f\x15\x00\x1f\x00)\x00\x00\x003\x00\x00\x00\x0b\x00\x00\x00\x0b\x00\x00\x00\x15\x00\x00\x00e\x00")
	err := bdnStats.Unpack(bdnStatsMsgBytes, 0)
	assert.NotNil(t, err)
}
